{
    "version" : "https://jsonfeed.org/version/1",
    "title" : "Posts on Kahlil Lechelt's Blog",
    "description": "Recent content in Posts on Kahlil Lechelt's Blog",
    "home_page_url" : "https://www.kahlillechelt.com",
    "feed_url" : "https://www.kahlillechelt.com/posts/index.json",
    "items" : [
    {
        "title" : "I am an engineering manager now",
        "date_published" : "2020-01-23T14:29:08Z",
        "date_modified" : "2020-01-23T14:29:08Z",
        "id" : "https://www.kahlillechelt.com/2020/01/23/i-am-an-engineering-manager-now/",
        "url" : "https://www.kahlillechelt.com/2020/01/23/i-am-an-engineering-manager-now/",
        "content_html" : "\u003cp\u003eLast year my manager quit. I was offered his position and since December or so, I am an engineering manager.\u003c/p\u003e\n\u003cp\u003eIt is strange to move from a well-defined role into such a hazily-defined one.\u003c/p\u003e\n\u003cp\u003eA few things have changed. I don\u0026rsquo;t code anymore at work and the relationship to my team has changed. Especially to those who now report to me.\u003c/p\u003e\n\u003cp\u003eI want to be the best possible manager to them that I can be, so I am busy learning.\u003c/p\u003e\n\u003cp\u003eMy friend \u003ca href=\"http://twitter.com/hglattergotz\"\u003eHenning Glatter-Götz\u003c/a\u003e recommended the \u003ca href=\"http://managingup.simplecast.com/\"\u003e\u003cstrong\u003eManaging Up podcast\u003c/strong\u003e\u003c/a\u003e to me. I have listened to a bunch of episodes so far and it has been very helpful already.\u003c/p\u003e\n\u003cp\u003eIf you are an engineering manager or are interested in becoming one, I highly recommend you check out \u003ca href=\"http://managingup.simplecast.com/\"\u003eManaging Up\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eSo far, my favorite episodes are:\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://managingup.simplecast.com/episodes/54705bed\"\u003e\u003cstrong\u003eEpisode 5: One on Ones: The Basics\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eI loved hearing about how they approach their one-on-ones and about their different techniques on how to ask questions. It was also really great to learn how commonplace one-on-ones are in engineering organizations.\nOne thing that surprised me was that it seems to be common to have weekly one-on-one meetings. We do it bi-weekly at LogMeIn. I think that it\u0026rsquo;s a good frequency if the one-on-ones are not skipped.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://managingup.simplecast.com/episodes/creating-self-managing-teams\"\u003e\u003cstrong\u003eEpisode 26: Creating Self-Managing Teams\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThis episode really exposed the experience the co-hosts of the show have. They are very open about mistakes they have made in the past and discuss how you might achieve \u0026ldquo;managing yourself out of a job\u0026rdquo;. This is a phrase that I have been thinking about a lot myself and I feel that should definitely be an engineering managers goal.\u003c/p\u003e\n"
    },
    {
        "title" : "Build a Slack slash command app with Zeit’s Now",
        "date_published" : "2019-07-08T14:29:08Z",
        "date_modified" : "2019-07-08T14:29:08Z",
        "id" : "https://www.kahlillechelt.com/2019/07/08/build-a-slack-slash-command-app-with-zeits-now/",
        "url" : "https://www.kahlillechelt.com/2019/07/08/build-a-slack-slash-command-app-with-zeits-now/",
        "content_html" : "\u003cp\u003eFirst of all: \u003ca href=\"https://zeit.co/now\"\u003e\u003cstrong\u003eNow\u003c/strong\u003e\u003c/a\u003e is so flipping great it’s not even funny. Basically it is this:\u003c/p\u003e\n\u003cp\u003eYou write your app, type \u003ccode\u003enow\u003c/code\u003e and it\u0026rsquo;s deployed. You get back the URL under which it is deployed and that’s that. Every other deployment results in a new deployment under a new URL.\u003c/p\u003e\n\u003cp\u003eThe latest deployment is always aliased to a URL that doesn’t change and that’s the address to your app or API.\u003c/p\u003e\n\u003cp\u003eIf you hook up Github, your branches get deployed automatically as immutable deployments. The alias of those deployments contains the branch name. Every push results in a new deployment.\u003c/p\u003e\n\u003cp\u003eNow is a perfect fit if you want to create a slash command app for Slack.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eSlash commands are super simple. When you send off a message like \u003ccode\u003e/mycommand yey\u003c/code\u003e all the command does is sending a post request over to a URL with your command and then prints out the response to you in Slack.\u003c/p\u003e\n\u003cp\u003eI used \u003ca href=\"https://github.com/zeit/micro\"\u003e\u003cstrong\u003eMicro\u003c/strong\u003e\u003c/a\u003e (also made by our buddies at Zeit) to set up the API. Micro is a small no-config Node tool that allows you to create a microservice in no time. Write the function that takes the request and start the microservice with the \u003ccode\u003emicro\u003c/code\u003e command and you\u0026rsquo;re good to go.\u003c/p\u003e\n\u003cp\u003eNow comes with \u003ca href=\"https://zeit.co/blog/now-init\"\u003einitialization templates\u003c/a\u003e that have configurations for different tools, frameworks, static site generators, etc. One of them is called \u003ccode\u003enode-micro\u003c/code\u003e which configures Micro for Now. In order to use it, type \u003ccode\u003enow init\u003c/code\u003e and then choose \u003ccode\u003enode-micro\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIt works out of the box. If you start the \u003ccode\u003enow dev\u003c/code\u003e and curl \u003ccode\u003elocalhost:3000\u003c/code\u003e you get the hello world message as a response.\u003c/p\u003e\n\u003cp\u003eYou can deploy that by just typing \u003ccode\u003enow\u003c/code\u003e on the terminal or by hooking up now with your GitHub repository.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eNext, configure your \u003ca href=\"https://api.slack.com/slash-commands\"\u003e\u003cstrong\u003eSlack slash command\u003c/strong\u003e\u003c/a\u003e. Give it a name and a slash command and the endpoint URL. In our case it would be the alias that was generated. The alias always points to the latest deployment.\u003c/p\u003e\n\u003cp\u003eWhen you use that slash command it will post back that hello world message back into your Slack chat as a response.\u003c/p\u003e\n\u003cp\u003eNow you are ready to take over the world with your Slack slash command!\u003c/p\u003e\n"
    },
    {
        "title" : "I was at ReactEurope and now I \"get\" React Hooks",
        "date_published" : "2019-06-07T15:33:30Z",
        "date_modified" : "2019-06-07T15:33:30Z",
        "id" : "https://www.kahlillechelt.com/2019/06/07/i-was-at-reacteurope-and-now-i-get-react-hooks/",
        "url" : "https://www.kahlillechelt.com/2019/06/07/i-was-at-reacteurope-and-now-i-get-react-hooks/",
        "content_html" : "\u003cp\u003eLast week, I went to Paris to spend some time there with my family and to attend ReactEurope.\u003c/p\u003e\n\u003cp\u003eBased on the kind of mediocre design of their website I did not expect a lot of care to go into the organization of the conference. I expected a dull conference room in a hotel and some interesting talks.\u003c/p\u003e\n\u003cp\u003eI got some interesting talks and a dull, stuffy conference room in a dull, ugly area of Paris. The room was too small for so many people though. The air was terrible and people coughing and sneezing all around me. I was not capable of spending a lot of time in there.\u003c/p\u003e\n\u003cp\u003eInstead, I took some time to read through the \u003ca href=\"https://reactjs.org/docs/hooks-intro.html\"\u003eReact Hooks documentation\u003c/a\u003e. Let me just take a second to say how well written and how thought-out the documentation is. Really world-class. Unlike the ReactEurope conference.\u003c/p\u003e\n\u003cp\u003eI also started rewriting \u003ca href=\"https://github.com/kahlil/grit\"\u003emy Grit editor\u003c/a\u003e from \u003ca href=\"https://github.com/preactjs/preact\"\u003ePreact\u003c/a\u003e and \u003ca href=\"https://github.com/developit/htm\"\u003ehtm\u003c/a\u003e to React with hooks. Just so to get familiar with them.\u003c/p\u003e\n\u003cp\u003eIt is always hard to convey how features like that impact your development experience without trying it out. I have only rewritten a small part of it so far but I like it a lot.\u003c/p\u003e\n\u003cp\u003eThe concept of custom hooks especially seems to have a lot of impact when it comes to simplifying your code.\u003c/p\u003e\n\u003cp\u003eHere is an example.\u003c/p\u003e\n\u003cp\u003eIn order for Grit to work the user has to store the path to their Markdown files in the settings. I store the settings by using this ace package called electron-store by Sindre Sorhus (Shout out to him, what would I do without his stellar open source work?!).\u003c/p\u003e\n\u003cp\u003eThis path needs to be shown in the UI via a state variable and it has to be synced back to the electron-store if it is changed.\u003c/p\u003e\n\u003cp\u003eSo I created this custom hook called useElectronStore to read the path from electron-store and to set the filePath state variable from it and to set both, the state variable and electron-store, with the new value once it is changed.\u003c/p\u003e\n\u003cp\u003eAnd it makes getting and setting electron-store values incredibly easy. The API basically looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst [someValue, setSomeValue] = useElectronStore('someValue', '');\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe \u003ccode\u003e'someValue'\u003c/code\u003e-string is the path in electron-store and the second value is the default value for it.\u003c/p\u003e\n\u003cp\u003eI can now say that I \u0026ldquo;get\u0026rdquo; React Hooks because ReactEurope was not that great. Works for me.\u003c/p\u003e\n"
    },
    {
        "title" : "Announcing Grit: a Markdown editor for blogging with a static site generator",
        "date_published" : "2019-05-07T14:30:59Z",
        "date_modified" : "2019-05-07T14:30:59Z",
        "id" : "https://www.kahlillechelt.com/2019/05/07/announcing-grit-a-markdown-editor-for-blogging-with-a-static-site-generator/",
        "url" : "https://www.kahlillechelt.com/2019/05/07/announcing-grit-a-markdown-editor-for-blogging-with-a-static-site-generator/",
        "content_html" : "\u003cp\u003eLast year I decided to write more. I thought I\u0026rsquo;d try a hosted solution because I wanted to concentrate on the writing and not on the fiddling with the site.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://micro.blog\"\u003eMicro.blog\u003c/a\u003e was the most attractive solution to me but after using it for a while I realized that, as a developer, I am not capable of leaving the building of my blog to somebody else. There were too many things I wanted to tweak/change, bugs I couldn\u0026rsquo;t live with etc.\u003c/p\u003e\n\u003cp\u003eSo I ended up sticking with my \u003ca href=\"http://gohugo.io\"\u003eHugo\u003c/a\u003e solution.\u003c/p\u003e\n\u003cp\u003eUnfortunately there are many little annoyances when blogging with a static site generator, due to the fact that your posts are a bunch of Markdown files in a folder with a specific file name and some frontmatter boilerplate in them.\u003c/p\u003e\n\u003cp\u003eCreating a blog post was always tedious. Too many little fiddly things to do before you could just start to write.\u003c/p\u003e\n\u003cp\u003eIn order to remedy this I created a \u003ca href=\"https://github.com/kahlil/blog-cli\"\u003eblog-cli\u003c/a\u003e that just scaffolds new blog posts for me. It works fine but I really wanted an editor that can do that for me.\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s why I built \u003ca href=\"https://github.com/kahlil/grit\"\u003eGrit\u003c/a\u003e. It\u0026rsquo;s a little Electron app that lets you manage a folder full of Markdown posts and edit them as well.\u003c/p\u003e\n\u003cp\u003eIt allows you to store the path to your Markdown files, filter through the files, create a new file, edit the file and publish via Git.\u003c/p\u003e\n\u003cp\u003eI used \u003ca href=\"https://preactjs.com/\"\u003ePreact\u003c/a\u003e and \u003ca href=\"https://github.com/developit/htm\"\u003ehtm\u003c/a\u003e to write it because I was too lazy to set up a build step and I love writing code the browser can directly interpret. For the file editing part in Grit I am using \u003ca href=\"https://codemirror.net/\"\u003eCodeMirror\u003c/a\u003e which is a hell of a product, wow.\u003c/p\u003e\n\u003cp\u003eIf you use Hugo, Jekyll, Gatsby or whatever other static site generator to build your blog and are looking for a little convenience there, give it a spin! See the current feature list \u003ca href=\"https://github.com/kahlil/grit\"\u003eon GitHub\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s an alpha version so there be dragons. But I am planning a bunch of improvements like: drag and drop images, configurable frontmatter and some enhancements around file-creation.\u003c/p\u003e\n\u003cp\u003eIf you want, let me know what you think \u003ca href=\"https://twitter.com/kahliltweets\"\u003eon Twitter\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "Get off of Medium and publish a blog under your own domain",
        "date_published" : "2019-04-02T10:08:50Z",
        "date_modified" : "2019-04-02T10:08:50Z",
        "id" : "https://www.kahlillechelt.com/2019/04/02/get-off-of-medium-and-publish-a-blog-under-your-own-domain/",
        "url" : "https://www.kahlillechelt.com/2019/04/02/get-off-of-medium-and-publish-a-blog-under-your-own-domain/",
        "content_html" : "\u003cp\u003eNobody can wall that off behind a paywall.\u003c/p\u003e\n\u003cp\u003eNobody can put a popup over your stuff and say \u0026ldquo;Don\u0026rsquo;t look at the content right now. It\u0026rsquo;s so much better if you login!\u0026quot;.\u003c/p\u003e\n\u003cp\u003eNobody can build their brand off of your work. Nobody can make money off of your work, if you don\u0026rsquo;t want to.\u003c/p\u003e\n\u003cp\u003eNobody can tell you \u0026ldquo;You can\u0026rsquo;t have your own domain on here.\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eYour hoster will most likely not suddenly go: \u0026ldquo;Oops we just went out of business / were acquired, we\u0026rsquo;re deleting all your stuff but you can export it until tomorrow and fuck off, basically.\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eAnd if they do, you can go and host that somewhere else.\u003c/p\u003e\n\u003cp\u003eYou can still decide to re-distribute your content to places like Medium, dev.to, Micro.blog, Twitter, Instagram, Linkedin, Facebook and / or via a newsletter. It\u0026rsquo;s a good way to extend your readership.\u003c/p\u003e\n\u003cp\u003eYou can have an RSS feed! That feed should always be \u003cem\u003eunder your domain\u003c/em\u003e!\u003c/p\u003e\n\u003cp\u003eWriting on the internet under other peoples / companies domain names is like giving away money.\u003c/p\u003e\n\u003cp\u003eSure, sometimes it makes sense to guest-post on somebody else\u0026rsquo;s blog because it broadens your audience. That\u0026rsquo;s a good trade-off.\u003c/p\u003e\n\u003cp\u003eYou should just always have a place that people can come back to that is yours.\u003c/p\u003e\n"
    },
    {
        "title" : "Constraints Are Decisions You Don't Have to Make",
        "date_published" : "2019-03-08T15:13:02Z",
        "date_modified" : "2019-03-08T15:13:02Z",
        "id" : "https://www.kahlillechelt.com/2019/03/08/constraints-are-decisions-you-dont-have-to-make/",
        "url" : "https://www.kahlillechelt.com/2019/03/08/constraints-are-decisions-you-dont-have-to-make/",
        "content_html" : "\u003cp\u003eSince I realized that constraints can produce more creative outcomes I‘ve been fascinated by it.\u003c/p\u003e\n\u003cp\u003eI think I first learned about it when the iPhone became popular and the form factor and usage patterns produced beautifully designed apps and then website and web app designs that were optimized for mobile.\u003c/p\u003e\n\u003cp\u003eI read up on it a little and there seems to be a pretty logical explanation for this.\u003c/p\u003e\n\u003cp\u003eIn an environment of abundance the brain is not being challenged. The brain likes to be efficient as possible. If there is an abundance of resources it\u0026rsquo;s going to be harder to be creative because your brain has no incentive to really get into gear.\u003c/p\u003e\n\u003cp\u003eIn a situation where you are confronted with resource scarcity of some kind, your brain has no choice to start turning up in order to find out how to work around the scarcity.\u003c/p\u003e\n\u003cp\u003eThis results in more creative, out-of-the-box thinking.\u003c/p\u003e\n\u003cp\u003eI think there is a second element that plays a part in this as well: reduced cognitive load.\u003c/p\u003e\n\u003cp\u003eResource scarcity could also be interpreted as: some decisions were already made for you. The fewer decisions you have to make, the more brain capacity is available to you to solve the problem at hand.\u003c/p\u003e\n"
    },
    {
        "title" : "The Ultimate Recipe to Attract an Audience on the Internet",
        "date_published" : "2019-03-01T13:17:48Z",
        "date_modified" : "2019-03-01T13:17:48Z",
        "id" : "https://www.kahlillechelt.com/2019/03/01/the-ultimate-recipe-to-attract-an-audience-on-the-internet/",
        "url" : "https://www.kahlillechelt.com/2019/03/01/the-ultimate-recipe-to-attract-an-audience-on-the-internet/",
        "content_html" : "\u003cp\u003eMy awesome co-worker \u003ca href=\"https://mobile.twitter.com\"\u003eEmma Wedekind\u003c/a\u003e wrote\n\u003ca href=\"https://dev.to/emmawedekind/how-i-gained-27000-twitter-followers-in-6-months-2hog\"\u003ethis post about how she got 27K followers on Twitter\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s a great post with lots of good advice to grow high quality followers.\u003c/p\u003e\n\u003cp\u003eI was able to watch the whole ride and it was quite something. There is one\nthing I noticed about how she used Twitter that I think had significant\ninfluence in why she blew up.\u003c/p\u003e\n\u003cp\u003eShe \u003cstrong\u003eeditorializes\u003c/strong\u003e her Twitter account. She deliberately tweets content that\nmight be valuable to the developer community. And she responds to tweets a lot.\u003c/p\u003e\n\u003cp\u003eShe also keeps a very friendly, welcoming and helpful tone.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBe kind and provide value frequently and consistently over long stretches of\ntime\u003c/strong\u003e is basically the ultimate recipe for attracting and growing an audience\non the internet. We\u0026rsquo;ve all seen this work many times.\u003c/p\u003e\n\u003cp\u003eIt has happened many times over on YouTube, Twitter and of course many blogs.\u003c/p\u003e\n\u003cp\u003eThe thing is, the hardest part is not to come up with the topics or to do the\nwriting itself. The hardest part is to keep it going in a specific rhythm over\nlong stretches of time.\u003c/p\u003e\n\u003cp\u003eIt takes a lot of discipline to keep that up, it\u0026rsquo;s hard work. But if you can do\nit, it will pay off.\u003c/p\u003e\n\u003cp\u003eMy hat goes off to Emma for doing it.\u003c/p\u003e\n\u003cp\u003eIf you want an audience too, follow \u003cem\u003ethe ultimate recipe\u003c/em\u003e and you most likely\nwill not blow up like Emma did, but you will for sure attract an audience that\ncares about what you have to say.\u003c/p\u003e\n"
    },
    {
        "title" : "TFW You Realize What Technical Debt Actually Means",
        "date_published" : "2019-02-21T21:31:28Z",
        "date_modified" : "2019-02-21T21:31:28Z",
        "id" : "https://www.kahlillechelt.com/2019/02/21/tfw-you-realize-what-technical-debt-actually-means/",
        "url" : "https://www.kahlillechelt.com/2019/02/21/tfw-you-realize-what-technical-debt-actually-means/",
        "content_html" : "\u003cp\u003eA few weeks ago I set out to write a blog post about technical debt and the\ncomplexities of getting rid of it, or some of it, when you work for a company.\u003c/p\u003e\n\u003cp\u003eI wanted to see what others had written about it and of course I landed on\n\u003ca href=\"https://martinfowler.com/bliki/TechnicalDebt.html\"\u003eMartin Fowler\u0026rsquo;s article about technical debt\u003c/a\u003e.\nWhen I started reading it I realized that up to that point I didn\u0026rsquo;t really know\nwhat tech debt was.\u003c/p\u003e\n\u003cp\u003eIt seams that while being confronted with the eternal vastness of software\nengineering, this is what my brain does: when I hear a term for the first time\nand I can deduce its approximate meaning from context, I store it as a known\nterm. Even though I don\u0026rsquo;t know exactly what it is.\u003c/p\u003e\n\u003cp\u003eWhat I deduced it to be was: \u0026ldquo;Legacy code, that makes it hard to maintain your\ncode or to add features.\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eAnd every time I heard or used the term \u0026ldquo;technical debt\u0026rdquo; there was a tiny little\nvoice in the back of my head going: \u0026ldquo;Why is it \u0026ldquo;debt\u0026rdquo;!? I don\u0026rsquo;t get it.\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eAnyways good ol\u0026rsquo; Martin cleaned up that part of my brain and made it crystal\nclear for me:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eTechnical Debt is a wonderful metaphor developed by Ward Cunningham to help us\nthink about this problem. In this metaphor, doing things the quick and dirty\nway sets us up with a technical debt, which is similar to a financial debt.\u003c/p\u003e\n\u003cp\u003eLike a financial debt, the technical debt incurs interest payments, which come\nin the form of the extra effort that we have to do in future development\nbecause of the quick and dirty design choice.\u003c/p\u003e\n\u003cp\u003eWe can choose to continue paying the interest, or we can pay down the\nprincipal by refactoring the quick and dirty design into the better design.\nAlthough it costs to pay down the principal, we gain by reduced interest\npayments in the future.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIt\u0026rsquo;s a \u003cem\u003emetaphor\u003c/em\u003e! It is actually a term that was invented in order to explain\nconsequences of sloppy coding to people in suits!\u003c/p\u003e\n\u003cp\u003eFowler goes on to write:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThe metaphor also explains why it may be sensible to do the quick and dirty\napproach. Just as a business incurs some debt to take advantage of a market\nopportunity developers may incur technical debt to hit an important deadline.\u003c/p\u003e\n\u003cp\u003eThe all too common problem is that development organizations let their debt\nget out of control and spend most of their future development effort paying\ncrippling interest payments.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThank. You. Technical debt can lead to \u003cstrong\u003ecrippling interest payments\u003c/strong\u003e. These\ncan slow down your development teams so badly that you can\u0026rsquo;t compete anymore.\u003c/p\u003e\n\u003cp\u003eThe term \u0026ldquo;technical debt\u0026rdquo; carries all the information you need in order to make\nthe argument to company leadership why getting rid of it or keeping it at bay\nmay be a wise business decision.\u003c/p\u003e\n\u003cp\u003eWho knew?! 😂\u003c/p\u003e\n"
    },
    {
        "title" : "Nested Loops Bow-Out",
        "date_published" : "2019-02-06T15:28:19Z",
        "date_modified" : "2019-02-06T15:28:19Z",
        "id" : "https://www.kahlillechelt.com/2019/02/06/nested-loops-bow-out/",
        "url" : "https://www.kahlillechelt.com/2019/02/06/nested-loops-bow-out/",
        "content_html" : "\u003cp\u003eAs you may know, I am a member of the JavaScript band\n\u003ca href=\"https://nestedloops.github.io/\"\u003eNested Loops\u003c/a\u003e. We performed on the last three\nopening performces of \u003ca href=\"http://jsconf.eu/\"\u003eJSConf.eu\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWe will not be performing at JSConf.eu this year.\u003c/p\u003e\n\u003cp\u003eIt was a great honor and privilege for us to be able to do that and we are\nthankful for the opportunity.\u003c/p\u003e\n\u003cp\u003eWe produced original music for the conference and performed it in a browser. If\nyou want, you can re-live of our performances\n\u003ca href=\"https://www.youtube.com/results?search_query=jsconf+eu+nested+loops\"\u003eon YouTube\u003c/a\u003e.\nAnd you can listen to our story on the Changelog podcast\n\u003ca href=\"https://changelog.com/jsparty/52\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI have no idea if we will ever perform again at JSConf.eu or any other event.\u003c/p\u003e\n\u003cp\u003eIf you want to talk to us about performing at your JavaScript conference or any\nother event, or if you needs some original music just\n\u003ca href=\"mailto:hello@kahlil.info\"\u003edrop me an email\u003c/a\u003e or DM me on\n\u003ca href=\"https://mobile.twitter.com/kahliltweets\"\u003eTwitter\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "How to Use Async Functions",
        "date_published" : "2019-01-22T11:43:02Z",
        "date_modified" : "2019-01-22T11:43:02Z",
        "id" : "https://www.kahlillechelt.com/2019/01/22/how-to-use-async-functions/",
        "url" : "https://www.kahlillechelt.com/2019/01/22/how-to-use-async-functions/",
        "content_html" : "\u003cp\u003e\u003ca href=\"http://2ality.com/2016/10/async-function-tips.html\"\u003eThis article\u003c/a\u003e by Dr. Axel\nRauschmayer was exactly what I needed to wrap my head around how to use async\nfunctions without confusion.\u003c/p\u003e\n\u003cp\u003eBecause I was just using them intuitively so far and because of their\nsynchronous style I got confused about when to \u003ccode\u003etry-catch\u003c/code\u003e. I also attempted to\ncall an async function without \u003ccode\u003eawait\u003c/code\u003e in front of it while using \u003ccode\u003eawait\u003c/code\u003e in its\nbody, fully expecting it will be executed synchronously.\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s important to remember that the foundation of async functions is Promises.\u003c/p\u003e\n\u003cp\u003eThe most interesting parts of Axel\u0026rsquo;s article to me, were these:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://2ality.com/2016/10/async-function-tips.html#async-functions-are-started-synchronously-settled-asynchronously\"\u003eAsync functions are started synchronously, settled asynchronously\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://2ality.com/2016/10/async-function-tips.html#parallelism\"\u003eParallelism\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://2ality.com/2016/10/async-function-tips.html#immediately-invoked-async-function-expressions\"\u003eImmediately Invoked Async Function Expressions\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n"
    },
    {
        "title" : "blog-cli: A CLI for Blogging with Static Site Generators",
        "date_published" : "2019-01-18T10:03:48Z",
        "date_modified" : "2019-01-18T10:03:48Z",
        "id" : "https://www.kahlillechelt.com/2019/01/18/blog-cli-a-cli-for-blogging-with-static-site-generators/",
        "url" : "https://www.kahlillechelt.com/2019/01/18/blog-cli-a-cli-for-blogging-with-static-site-generators/",
        "content_html" : "\u003cp\u003eMy blog is built with Hugo. Every blog I ever had was built with a static site\ngenerator or a file based CMS. I love static site generators, they make content\nmanagement simple, they are secure and it\u0026rsquo;s fun to build websites with them.\u003c/p\u003e\n\u003cp\u003eFor me, they have one problem: creating a blog post is annoying. Typically the\nfile for the post needs to have the date in it and the slug and then you need to\nput in the Front Matter for the post. It is all just very tedious and annoying.\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s why I made blog-cli. It creates the Markdown file for me at the right\nlocation with the correct file name, inserts the basic Front Matter and opens\nthe file in my favorite Markdown editor. This means I go from post idea to\nwriting in 1 second.\u003c/p\u003e\n\u003cp\u003eThis should work for most static site generators. At least for simple setups.\u003c/p\u003e\n\u003cp\u003eHere is how it works.\u003c/p\u003e\n\u003cp\u003eFirst you have to install blog-cli. You need Node.js and npm for that.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003enpm install --global @kahlil/blog-cli\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen you need to tell blog-cli where you want it to put your posts.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eblog --path ~/my-blog/posts\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThen you need to tell blog-cli about your favorite Markdown Editor.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eblog --editor 'ia writer'\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNow you are all set and you can create a new post and open it in your editor by\nsimple specifying a slug.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eblog my-new-cool-post\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis will create a new file with the filename: 2019-01-17-my-new-cool-post.md in\nthe directory you specified, ~/my-blog/posts in this case.\u003c/p\u003e\n\u003cp\u003eThe Front Matter that is inserted looks something like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e---\ndraft: true\ndate: 2019-01-18T10:03:48.620Z\ntitle: \u0026quot;\u0026quot;\n---\n\u003c/code\u003e\u003c/pre\u003e\u003chr\u003e\n\u003cp\u003eNow, if you are part of the cool kids club then you probably keep your files in\na Git repository, commit new blog posts and push them to Github at which point\nit gets deployed to Netlify.\u003c/p\u003e\n\u003cp\u003eIt turns out that blog-cli can help you with that as well!\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eblog --publish\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eWill automatically commit all changes with the message \u0026lsquo;new post\u0026rsquo; and execute a\ngit push.\u003c/p\u003e\n\u003cp\u003eNifty, right?! If you are static-site-generator-blogging as well I hope blog-cli\ncan help you.\u003c/p\u003e\n\u003cp\u003eIf you have any ideas to improve it please send an issue or a PR\n\u003ca href=\"https://github.com/kahlil/blog-cli\"\u003eon GitHub\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "Blogging is Back",
        "date_published" : "2019-01-17T22:50:14Z",
        "date_modified" : "2019-01-17T22:50:14Z",
        "id" : "https://www.kahlillechelt.com/2019/01/17/blogging-is-back/",
        "url" : "https://www.kahlillechelt.com/2019/01/17/blogging-is-back/",
        "content_html" : "\u003cp\u003eI\u0026rsquo;m excited about blogs this year. It really feels like blogs and RSS feeds are\nback. I am especially happy to see some developers getting serious about it.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://overreacted.io\"\u003eDan Abramov\u003c/a\u003e started the year off with a barrage of\nreally good posts of which some already went viral. People even started to\ntranslate them into different languages. Wow.\u003c/p\u003e\n\u003cp\u003eYoshua Wuyts started the year with \u003ca href=\"http://blog.yoshuawuyts.com\"\u003ea new blog\u003c/a\u003e as\nwell. With a sick dark theme, too.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://css-tricks.com\"\u003eCSS Tricks\u003c/a\u003e relaunched their blog with an amazing dark\ntheme design. Not a new blog obviously but man did they make a splash with this.\n\u003ca href=\"https://css-tricks.com/design-v17/\"\u003eTheir post about how they came up with the design\u003c/a\u003e\nis really impressive.\u003c/p\u003e\n"
    },
    {
        "title" : "",
        "date_published" : "2019-01-16T21:53:42+01:00",
        "date_modified" : "2019-01-16T21:53:42+01:00",
        "id" : "https://www.kahlillechelt.com/2019/01/16/remove-bg/",
        "url" : "https://www.kahlillechelt.com/2019/01/16/remove-bg/",
        "content_html" : "\u003cp\u003eJust a few days ago I stumbled over \u003ca href=\"http://remove.bg\"\u003eremove.bg\u003c/a\u003e. You can\nupload any picture with a face on it and it will give you back the same picture\nwith the background removed and made transparent. It\u0026rsquo;s quite astonishing. How do\nthey do this?!\u003c/p\u003e\n"
    },
    {
        "title" : "",
        "date_published" : "2019-01-09T10:26:18+01:00",
        "date_modified" : "2019-01-09T10:26:18+01:00",
        "id" : "https://www.kahlillechelt.com/2019/01/09/nextjs-mdx-blog-kit/",
        "url" : "https://www.kahlillechelt.com/2019/01/09/nextjs-mdx-blog-kit/",
        "content_html" : "\u003cp\u003e\u003ca href=\"https://github.com/lorenseanstewart/nextjs-mdx-blog-kit\"\u003eThis Next.js MDX Blog Kit\u003c/a\u003e\nsure looks interesting!\u003c/p\u003e\n"
    },
    {
        "title" : "Salary Negotiations for JavaScript Developers (and Anybody Else)",
        "date_published" : "2019-01-04T10:05:52+01:00",
        "date_modified" : "2019-01-04T10:05:52+01:00",
        "id" : "https://www.kahlillechelt.com/2019/01/04/salary-negotiations-for-javascript-developers-and-anybody-else/",
        "url" : "https://www.kahlillechelt.com/2019/01/04/salary-negotiations-for-javascript-developers-and-anybody-else/",
        "content_html" : "\u003cp\u003eSalary negotiations at the start of a job always feel somewhat like a war to me.\u003c/p\u003e\n\u003cp\u003eEach party is trying to get on higher ground to get the tactical advantage over the other.\u003c/p\u003e\n\u003cp\u003eTypically one of those parties comes to that fight ill-prepared. Generally that’s the prospective employee.\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s weird that your first interaction with your future employer is them basically trying to get the best of you. Companies should just pay fair market by default but they don\u0026rsquo;t. They try to get you as cheap as they can.\u003c/p\u003e\n\u003cp\u003eI learned a few things about salary negotiations from a friend, from experience and from this \u003ca href=\"https://mobile.twitter.com/filosottile/status/1070099435085066241\"\u003etwitter thread\u003c/a\u003e that led me to \u003ca href=\"https://www.kalzumeus.com/2012/01/23/salary-negotiation/\"\u003ethis amazing 7k word Kalzumeus article\u003c/a\u003e on the topic.\u003c/p\u003e\n\u003cp\u003eHere are the three most important things I learned.\u003c/p\u003e\n\u003ch2 id=\"1-never-give-a-number\"\u003e1. Never give a number\u003c/h2\u003e\n\u003cp\u003eIf they want to know what you want to make, they want to gain leverage over you in order to lower your ask, don’t tell them.\u003c/p\u003e\n\u003cp\u003eRather tell them:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eFirst and foremost I am interested if we are a mutual fit. I am happy to talk about the financials later on in the process.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIf they keep asking say this.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eMoney is not that important to me right now, I would like to find out if we are a mutual fit first. I do expect to be paid a salary that is fair market.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIf they want to know what you currently make, they want to gain leverage over you to see if they can low-ball you, don’t tell them.\u003c/p\u003e\n\u003cp\u003eRather tell them:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI don’t feel comfortable talking about the internals of my current working arrangement out of respect to my current employer.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eOr just be blunt and say:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI don’t see how my current salary factors into these discussions. Let’s find out if we are a mutual fit first.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe goal is to get them to make an offer first. That offer will be in the middle range of what they can offer you and you can negotiate up from there.\u003c/p\u003e\n\u003ch2 id=\"2-always-be-negotiating\"\u003e2. Always be negotiating\u003c/h2\u003e\n\u003cp\u003eAlways negotiate. Not necessarily because you need the money but because it represents your value at the company. It is a matter of respect and it influences how you are perceived at the company.\u003c/p\u003e\n\u003ch2 id=\"3-start-negotiating-when-you-receive-an-offer\"\u003e3. Start negotiating when you receive an offer\u003c/h2\u003e\n\u003cp\u003eSince you are not giving them a number, they will make an offer. Here is where you start negotiating. At this point it is highly unlikely that they would reject you for negotiating. They simply invested too much into you already. Take your time, maybe say you have to talk it over with your spouse, or that you need to read through it in peace.\u003c/p\u003e\n\u003cp\u003eThen you could say that the offer is \u0026ldquo;interesting\u0026rdquo; but not quite there to get this done. Ask if there is flexibility on that number. They might make you another offer that is higher and that they can\u0026rsquo;t go any higher. This is where you can tell them that this offer will work if they can throw in a few more vacation days or something like stock options etc. As @patio11 puts it in his article:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eYou Have A Multi-Dimensional Preference Set.  Use It.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThis kind of tactic should get you to the high end of what is possible to get for your position. This will make you feel good and strengthen your position in the company from the get go.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eTo be honest, I think it is a flaw in the system and really uncomfortable that one of your first interactions with your new employer is of this nature.\u003c/p\u003e\n\u003cp\u003eThere are rare cases in which it\u0026rsquo;s done differently. Basecamp for instance pays everybody the same competitive salary based on job title and current market situation. You should read \u003ca href=\"https://m.signalvnoise.com/how-we-pay-people-at-basecamp-f1d04f4f194b\"\u003etheir article about it\u003c/a\u003e, it’s such a refreshing take on this matter.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eIf you want to get deeper into this I highly recommend you read \u003ca href=\"https://mobile.twitter.com/patio11\"\u003e@patio11\u0026rsquo;s\u003c/a\u003e \u003ca href=\"https://www.kalzumeus.com/2012/01/23/salary-negotiation/\"\u003earticle that I mentioned a few times already\u003c/a\u003e. He links to more resources as well.\u003c/p\u003e\n\u003cp\u003eHappy negotiating!\u003c/p\u003e\n"
    },
    {
        "title" : "Just Fucking Ship Taught Me How to Ship Blog Posts",
        "date_published" : "2018-11-29T17:19:20+01:00",
        "date_modified" : "2018-11-29T17:19:20+01:00",
        "id" : "https://www.kahlillechelt.com/2018/11/29/just-fucking-ship-taught-me-how-to-ship-blog-posts/",
        "url" : "https://www.kahlillechelt.com/2018/11/29/just-fucking-ship-taught-me-how-to-ship-blog-posts/",
        "content_html" : "\u003cp\u003e\u003ca href=\"https://stackingthebricks.com/just-fucking-ship/\"\u003eJust Fucking Ship\u003c/a\u003e by \u003ca href=\"https://mobile.twitter.com/amyhoy\"\u003ethe most excellent Amy Hoy\u003c/a\u003e is a great book. It’s about how to bootstrap and ship any (side-)project.\u003c/p\u003e\n\u003cp\u003eThe most valuable part of the book for me personally was how she describes outlining a blog post.\u003c/p\u003e\n\u003cp\u003eI always thought outlining a post was to come up with some high-level headlines. That never really helped though, because they were too high-level and I was still busy working on the structure of the blog post on the fly while filling in the gaps between the headlines.\u003c/p\u003e\n\u003cp\u003eNo, what I learned from Amy is that you have to write down each and every thought that you want to put into that post. Write them down, fuck structure, fuck grammar, fuck spelling.\u003c/p\u003e\n\u003cp\u003ePut it all on (virtual) paper. Now that you did that you can look at it and move your points around, give the whole thing some structure, delete some, add some.\u003c/p\u003e\n\u003cp\u003eOnce you are happy with that, you go ahead and \u003cem\u003ewrite\u003c/em\u003e the blog post. At this point its super easy because all you need to do is write it out, you are not structuring it while you write it anymore.\u003c/p\u003e\n\u003cp\u003eThis makes so much sense because it completely separates writing a blog post into two smaller isolated steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eDetermine content \u0026amp; structure\u003c/li\u003e\n\u003cli\u003eWrite it\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eTake this here blog post for example. When I first started writing it I started with a big introduction about the book and Amy and bla and immediately I got bored of my own words.\u003c/p\u003e\n\u003cp\u003eThat made me stop and think again: what is it really I want to convey with this post?\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eJust Fucking Ship is great\u003c/li\u003e\n\u003cli\u003eHere is why it was great for me\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eSo I deleted everything and just wrote Just Fucking Ship is a great book and went on writing about my greatest take-away from it.\u003c/p\u003e\n\u003cp\u003eI feel like it makes this post much more meaty and interesting for somebody to read. It definitely is much more fun to write.\u003c/p\u003e\n\u003cp\u003eFor closing I would like to add that there are also many more surprising tips in that book to help you finally start and also \u003cem\u003eactually ship\u003c/em\u003e your side project.\u003c/p\u003e\n\u003cp\u003eBut instead of telling you what they are I would rather you go and support Amy Hoy and get yourself the book! It\u0026rsquo;s a really quick read and it is worth it.\u003c/p\u003e\n"
    },
    {
        "title" : "Vimming in the Squasher: How to Squash Your Commits with VIM",
        "date_published" : "2018-11-21T09:01:05+01:00",
        "date_modified" : "2018-11-21T09:01:05+01:00",
        "id" : "https://www.kahlillechelt.com/2018/11/21/vimming-in-the-squasher-how-to-squash-your-commits-with-vim/",
        "url" : "https://www.kahlillechelt.com/2018/11/21/vimming-in-the-squasher-how-to-squash-your-commits-with-vim/",
        "content_html" : "\u003cp\u003eWhenever I use \u003ccode\u003egit rebase -i\u003c/code\u003e to squash commits, Git opens the squasher (that’s how I just named the text view for the\ninteractive rebase) in VIM.\u003c/p\u003e\n\u003cp\u003eMy knowledge of vimming is not very great so I used to just type \u003ccode\u003ei\u003c/code\u003e and then inch around with the arrow keys and delete\ncharacter by character in order to delete the word “pick” a bunch of times and then type “squash” a bunch of time.\u003c/p\u003e\n\u003cp\u003eOf course that was incredibly annoying, so\n\u003ca href=\"https://coderwall.com/p/d6gifw/use-vim-visual-blocks-to-squash-multiple-git-commits\"\u003eI finally looked up\u003c/a\u003e how to vim in\nthe squasher and it is glorious. So here is how you do it:\u003c/p\u003e\n\u003cp\u003eFirst, move to the line with the first commit you want to squash, which is typically the second one.\u003c/p\u003e\n\u003cp\u003eThen, enter into something called \u003cem\u003evisual block mode\u003c/em\u003e (WTF?! What does that even mean?) by hitting \u003ccode\u003ectrl\u003c/code\u003e + \u003ccode\u003eV\u003c/code\u003e.\nSomething magical happens: when you move the curser it blocks out every character you move over with white and if you\nmove down it will cover as many characters you covered in the line above. It looks like blocks. So I guess that\u0026rsquo;s where\nthe \u0026ldquo;visual block\u0026rdquo; comes in 😅.\u003c/p\u003e\n\u003cp\u003eSelect all the rows you wish to squash while visually blocking out the word \u0026ldquo;pick\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eNow, more magic: hit \u003ccode\u003eC\u003c/code\u003e and type the word \u0026ldquo;squash\u0026rdquo;, after that hit \u003ccode\u003eesc\u003c/code\u003e and see the word \u0026ldquo;squash\u0026rdquo; applied in all\nplaces that were \u0026ldquo;visually blocked out\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eIf you only could exit VIM at this point, you would actually successfully squash all these commits. A boy can dream,\nright?\u003c/p\u003e\n"
    },
    {
        "title" : "Nested Loops on the JS Party Podcast",
        "date_published" : "2018-11-16T20:45:56+01:00",
        "date_modified" : "2018-11-16T20:45:56+01:00",
        "id" : "https://www.kahlillechelt.com/2018/11/16/nested-loops-on-the-js-party-podcast/",
        "url" : "https://www.kahlillechelt.com/2018/11/16/nested-loops-on-the-js-party-podcast/",
        "content_html" : "\u003cp\u003e\u003ca href=\"https://twitter.com/thedeftone\"\u003eJan\u003c/a\u003e and I had the distinct honor to guest on the JS Party podcast last week to talk about \u003ca href=\"https://nestedloops.github.io\"\u003eNested Loops\u003c/a\u003e. First of all it was a really great experience to be a guest on there. The Changelog family of podcasts are very professionally run and it was a great pleasure to be on. \u003ca href=\"https://twitter.com/noopkat\"\u003e@noopkat\u003c/a\u003e, \u003ca href=\"https://twitter.com/jerodsanto\"\u003e@jerodsanto\u003c/a\u003e and \u003ca href=\"https://twitter.com/adamstac\"\u003e@adamstac\u003c/a\u003e made us feel very welcome and comfortable.\u003c/p\u003e\n\u003cp\u003eWe talked about how Nested Loops was founded and immediately had band problems. Why I am rapping with a Jamaican accent. What \u003ca href=\"https://twitter.com/bonotes\"\u003e@bonotes\u003c/a\u003e role is. How the tech works and evolved on the music, video and effects sides. I think it came out great and you should definitely give it a listen.\u003c/p\u003e\n\u003cp\u003eGet it by looking for JS Party in your favorite podcast app or listen right now, right here:\u003c/p\u003e\n\u003cp\u003e\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003eJS Party 52: Nest \u0026lsquo;dem loops\u003c!-- raw HTML omitted --\u003e – Listen on \u003c!-- raw HTML omitted --\u003eChangelog.com\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e\u003c!-- raw HTML omitted --\u003e\u003c/p\u003e\n"
    },
    {
        "title" : "Flip the Switch",
        "date_published" : "2018-11-16T15:15:29+01:00",
        "date_modified" : "2018-11-16T15:15:29+01:00",
        "id" : "https://www.kahlillechelt.com/2018/11/16/flip-the-switch/",
        "url" : "https://www.kahlillechelt.com/2018/11/16/flip-the-switch/",
        "content_html" : "\u003cp\u003eReactive Programming is a paradigm that solves a lot of problems that many JavaScript frameworks partly implement by introducing some sort of \u0026ldquo;reactivity\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eThat typically ties the reactivity down to one use case in the framework itself. Reactive Programming can be helpful in many more scenarios though.\u003c/p\u003e\n\u003cp\u003eOne huge hurdle for adoption seems to be to grasp the actual concepts. Specifically doing push-based programming instead of pull-based.\u003c/p\u003e\n\u003cp\u003eI can relate because it did take me quite some time to get there but once the switch was flipped, so to speak, I started to think in terms of Reactive Programming instantly.\u003c/p\u003e\n\u003cp\u003eThat seems to be exactly the problem, it\u0026rsquo;s not a hard concept to understand. It just takes a lot of effort to start thinking about your programming problems differently.\u003c/p\u003e\n\u003cp\u003eI am currently putting together a talk that is trying to flip that switch. I have a few ideas based on things I wished I knew in the beginning.\u003c/p\u003e\n\u003cp\u003eBasically it will focus on making you understand three things about RxJS Observables:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eObservables are just functions receiving an observer\u003c/li\u003e\n\u003cli\u003eObservables are lazy\u003c/li\u003e\n\u003cli\u003eObservables are ubiquitous\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis could work 🤔\u0026hellip; maybe?\u003c/p\u003e\n"
    },
    {
        "title" : "On Dropping Side Projects",
        "date_published" : "2018-11-13T12:55:45+01:00",
        "date_modified" : "2018-11-13T12:55:45+01:00",
        "id" : "https://www.kahlillechelt.com/2018/11/13/on-dropping-side-projects/",
        "url" : "https://www.kahlillechelt.com/2018/11/13/on-dropping-side-projects/",
        "content_html" : "\u003cp\u003eI stopped working on my code-related side projects \u003ca href=\"http://github.com/kahlil/grit\"\u003egrit\u003c/a\u003e,\n\u003ca href=\"http://github.com/kahlil/belly\"\u003ebelly\u003c/a\u003e and \u003ca href=\"http://github.com/kahlil/flow-state\"\u003eflow-state\u003c/a\u003e. I have a family and we\nrecently moved. So most of my free time is spent working on the flat or spending time with the family.\u003c/p\u003e\n\u003cp\u003eThere are a few side proj\u0026lt;ects I am not abandoning though.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eI will continue to co-organize \u003ca href=\"http://karlsruhejs.org\"\u003eKarlsruheJS\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eEven though the podcast is on a break right now, we will continue with \u003ca href=\"http://reactive.audio\"\u003eReactive Podcast\u003c/a\u003e soon\u003c/li\u003e\n\u003cli\u003eI will continue to work on musical projects every now and then\u003c/li\u003e\n\u003cli\u003eI will continue to write on this blog\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWriting regularly is somewhat of a new habit for me. I always thought it was not for me, but I did feel an urge to write\nthat became bigger over the years. Now I\u0026rsquo;m just acting on it.\u003c/p\u003e\n\u003cp\u003eA big reason why I feel OK dropping my code related side projects is the fact that I feel quite happy and challenged at\nwork. I don\u0026rsquo;t have to feed my desire to learn and grow with my side projects at the moment.\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s a pretty new and awesome feeling 😀.\u003c/p\u003e\n"
    },
    {
        "title" : "Static Site Generators for Documentation",
        "date_published" : "2018-11-13T11:42:15+01:00",
        "date_modified" : "2018-11-13T11:42:15+01:00",
        "id" : "https://www.kahlillechelt.com/2018/11/13/static-site-generators-for-documentation/",
        "url" : "https://www.kahlillechelt.com/2018/11/13/static-site-generators-for-documentation/",
        "content_html" : "\u003cp\u003eWe are using some internal libraries at work that are not very well documented. As a result it is really difficult and time-intensive to onboard onto the project. It became clear to me that not having good documentation can come at a very high cost when it comes to long-term productivity for a team with changing team members.\u003c/p\u003e\n\u003cp\u003eAs a result I started to work on documenting the inner workings of our application and it does feel satisfying to bring it to paper.\u003c/p\u003e\n\u003cp\u003eWith documentation on my mind I attended our local JavaScript meetup \u003ca href=\"http://karlsruhejs.org/\"\u003eKarlsruheJS\u003c/a\u003e, which I also co-organize. Interestingly it featured a talk about \u003ca href=\"https://vuepress.vuejs.org/\"\u003eVuePress\u003c/a\u003e a static site generator based on VueJS which is specifically tailored towards creating documentation. I was smitten instantly!\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://twitter.com/kahliltweets/status/1057937401191059456\"\u003eAfter tweeting about my excitement\u003c/a\u003e about VuePress KarlsruheJS member Carsten \u003ca href=\"https://twitter.com/Jupiterrrr/status/1058267113138409472\"\u003edirected my attention towards Docusaurus by Facebook\u003c/a\u003e, which is (obviously) a React-based static site generator for documentation. And since \u003ca href=\"https://twitter.com/EmmaWedekind/status/1051767104108732416\"\u003emy co-worker Emma is totally into Gatsby\u003c/a\u003e I took a closer look there too and also found a Gatsby theme for documentation as well.\u003c/p\u003e\n\u003cp\u003eMy docs are not ready to be hosted yet but it is good to know that there are some solid ways to get a documentation site up quickly. Since our project is written in React I will not go with a Vue-based solution though. It will be either Docusaurus or Gatsby.\u003c/p\u003e\n"
    },
    {
        "title" : "",
        "date_published" : "2018-11-08T14:07:30+01:00",
        "date_modified" : "2018-11-08T14:07:30+01:00",
        "id" : "https://www.kahlillechelt.com/2018/11/08/micro-blog-mastodon/",
        "url" : "https://www.kahlillechelt.com/2018/11/08/micro-blog-mastodon/",
        "content_html" : "\u003cp\u003eManton Reece \u003ca href=\"https://manton.org/2018/11/07/microblog-mastodon.html\"\u003eannounced that Micro.blog supports Mastodon now\u003c/a\u003e.\nThis makes the two microblogging alternatives compatible with each other to some extent and effectively connects the two networks. I think this could be a really significant step for at least \u003ca href=\"http://micro.blog\"\u003eMicro.blog\u003c/a\u003e. Congrats on the release @manton!\u003c/p\u003e\n"
    },
    {
        "title" : "",
        "date_published" : "2018-11-07T17:18:38+01:00",
        "date_modified" : "2018-11-07T17:18:38+01:00",
        "id" : "https://www.kahlillechelt.com/2018/11/07/accessibility-quick-wins/",
        "url" : "https://www.kahlillechelt.com/2018/11/07/accessibility-quick-wins/",
        "content_html" : "\u003cp\u003eWe launched an \u003ca href=\"https://medium.com/logmein-engineering\"\u003eengineering blog at LogMeIn\u003c/a\u003e. I contributed\n\u003ca href=\"https://medium.com/logmein-engineering/3-ways-to-quickly-add-accessibility-to-a-legacy-web-app-c3c92b51ef12\"\u003eone of the first articles\u003c/a\u003e\nin which I share some quick tips on how to boost accessibility on your legacy web app.\u003c/p\u003e\n\u003cp\u003eI always thought that accessibility on the web was super hard but I was surprised at how easy it can be. Yay for web\nstandards and WAI-ARIA 🙌.\u003c/p\u003e\n"
    },
    {
        "title" : "Kottke at The Talk Show",
        "date_published" : "2018-08-15T16:50:03+02:00",
        "date_modified" : "2018-08-15T16:50:03+02:00",
        "id" : "https://www.kahlillechelt.com/2018/08/15/kottke-at-the-talk-show/",
        "url" : "https://www.kahlillechelt.com/2018/08/15/kottke-at-the-talk-show/",
        "content_html" : "\u003cp\u003eOne of my favorite podcasts is \u003ca href=\"https://daringfireball.net/thetalkshow/\"\u003eThe Talk Show\u003c/a\u003e with John Gruber. Gruber is the man behind \u003ca href=\"https://daringfireball.net/\"\u003eDaring Fireball\u003c/a\u003e, a very successful and long standing Apple news and analysis website.\u003c/p\u003e\n\u003cp\u003eThe episode I would like to point out is the one on which Jason Kottke joined as a guest. John invited him to celebrate the 20th anniversary of \u003ca href=\"https://kottke.org/\"\u003ekottke.org\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI am not a big kottke.org reader but nevertheless I found his story and the history of the site very interesting. I am always fascinated with these type of project where one person runs a successful business by just relentlessly publishing on the internet in a very focused way.\u003c/p\u003e\n\u003cp\u003eCheck out The Talk Show episode in question \u003ca href=\"https://daringfireball.net/thetalkshow/2018/03/24/ep-217\"\u003eright here\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "belly FAQ: Y U NO USE ALIASES?",
        "date_published" : "2018-08-10T15:30:40+02:00",
        "date_modified" : "2018-08-10T15:30:40+02:00",
        "id" : "https://www.kahlillechelt.com/2018/08/10/belly-faq-y-u-no-use-aliases/",
        "url" : "https://www.kahlillechelt.com/2018/08/10/belly-faq-y-u-no-use-aliases/",
        "content_html" : "\u003cp\u003eSome people react to what I am doing with \u003ca href=\"https://github.com/kahlil/belly\"\u003e\u003cem\u003ebelly\u003c/em\u003e\u003c/a\u003e with the question why I didn\u0026rsquo;t use Git aliases or bash aliases.\nIt is true, that the general behavior could have been implemented using aliases. But even in its current MVP-state belly does more than I comfortably could cover with aliases.\u003c/p\u003e\n\u003ch2 id=\"the-spinner\"\u003eThe Spinner\u003c/h2\u003e\n\u003cp\u003eIn order to show that belly is working, I am using a command line spinner. The spinner has different states and shows different text for those different states.\u003c/p\u003e\n\u003cp\u003eClearly this could have been done with bash scripts of some sort but yeah, why would I do that?\u003c/p\u003e\n\u003cp\u003eI am JavaScript developer so I use the tools that I am comfortable with, to make things.\u003c/p\u003e\n\u003cp\u003eAlso \u003cem\u003ewhoop whoop\u003c/em\u003e for npm because that said spinner is actually a ridiculously useful and powerful npm package by none other than the one Sindre Sorhus called \u003ca href=\"https://github.com/sindresorhus/ora\"\u003e\u003cem\u003eora\u003c/em\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"shareability--portability\"\u003eShareability \u0026amp; Portability\u003c/h2\u003e\n\u003cp\u003eAliases are just a little text in a config file and therefore quite easy to share and to drag around to your other machines or friend\u0026rsquo;s machines.\u003c/p\u003e\n\u003cp\u003eIt does not beat \u003ccode\u003enpm install\u003c/code\u003e though. If you want to port your config files to other computers or share it with other people you have to back them up somewhere and also provide some installation script in order to add them easily to a Git setup (if you\u0026rsquo;re friendly).\u003c/p\u003e\n\u003cp\u003eBy keeping this functionality in an npm package I get backup, easy-install and shareability out-of-the-box. On top of that, many developers are very familiar with using npm to install tooling.\u003c/p\u003e\n\u003ch2 id=\"more-ux\"\u003eMore UX\u003c/h2\u003e\n\u003cp\u003eGoing forward I would like to further improve belly\u0026rsquo;s CLI-UX by, for instance, improving error display and improving the spinner states and who knows what I come up with.\u003c/p\u003e\n\u003cp\u003eBy writing this tool with JavaScript, it is extremely easy for me to extend the tool and to keep iterating. Aliases with bash scripts would just break my brain and it would take me forever.\u003c/p\u003e\n\u003ch2 id=\"try-belly\"\u003eTry belly\u003c/h2\u003e\n\u003cp\u003eIf you want to know what I am talking about, \u003ca href=\"https://github.com/sindresorhus/ora\"\u003eget belly\u003c/a\u003e by doing \u003ccode\u003enpm i -g belly\u003c/code\u003e.\nIf you have any ideas for extending it or improving it, hit me up in the \u003ca href=\"https://github.com/kahlil/belly/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\"\u003ebelly issues\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "belly: Improving Git's Command Line User Experience",
        "date_published" : "2018-08-08T09:50:51+02:00",
        "date_modified" : "2018-08-08T09:50:51+02:00",
        "id" : "https://www.kahlillechelt.com/2018/08/08/belly-improving-gits-command-line-user-experience/",
        "url" : "https://www.kahlillechelt.com/2018/08/08/belly-improving-gits-command-line-user-experience/",
        "content_html" : "\u003cp\u003eMy preferred way to use Git is on the command line. I have a set of Git command\nsequences that I use all the time and that I know by heart but are a nuisance to\ntype out every time and a set of command sequences that I need regularly but\nhave to look up all the time. In order to improve my personal Git user\nexperience I created \u003ca href=\"https://github.com/kahlil/belly\"\u003e\u003cem\u003ebelly\u003c/em\u003e\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003ebelly is a cli-tool that provides a better user experience for some common Git\ncommand sequences:\u003c/p\u003e\n\u003ch2 id=\"commit--push\"\u003eCommit \u0026amp; Push\u003c/h2\u003e\n\u003cp\u003eWhen working on a personal project or on a feature branch within GitHub Flow, I\ndo this all the time:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit commit -m \u0026quot;my commit message\u0026quot;\ngit push\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThat’s a lot of typing for something I do tens of times a day.\u003c/p\u003e\n\u003cp\u003ebelly combines this into one command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebelly c my commit message\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cem\u003eTip: instead of typing \u003ccode\u003ebelly\u003c/code\u003e you can just type \u003ccode\u003eb\u003c/code\u003e.\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"git-checkout-branch-or-create-and-checkout\"\u003eGit Checkout Branch Or Create And Checkout\u003c/h2\u003e\n\u003cp\u003eI create branches for features, bug fixes and hot fixes all the times. I also\noften have to switch between branches.\u003c/p\u003e\n\u003cp\u003ebelly combines switching and creating-and-switching into one command. So instead\nof:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit checkout my-branch\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003egit checkout -b my-branch\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI can just do:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebelly s my-branch\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ebelly will switch to \u003ccode\u003emy-branch\u003c/code\u003e if it exists and it will create-and-switch to\n\u003ccode\u003emy-branch\u003c/code\u003e if it doesn\u0026rsquo;t exist yet.\u003c/p\u003e\n\u003ch2 id=\"set-and-delete-tags-locally-and-on-remote\"\u003eSet And Delete Tags Locally And On Remote\u003c/h2\u003e\n\u003cp\u003eWhen you set a version tag you typically want it set in the local and the remote\nrepository. belly allows you to do that with:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebelly t v1.0.0\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ebelly can also delete those tags for you:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebelly t v1.0.0 -d\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"rename-a-branch-locally-and-remote\"\u003eRename A Branch Locally And Remote\u003c/h2\u003e\n\u003cp\u003eThis is one of those Git commands I always have to look up. How do I rename a\nbranch again and why is the command to rename it on the server so different?\u003c/p\u003e\n\u003cp\u003eAnyway, no need to break out Google for that anymore. Just:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebelly n my-new-branch-name\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eand it will rename your local branch as well as the corresponding remote branch\nfor you.\u003c/p\u003e\n\u003ch2 id=\"easy-squashing\"\u003eEasy Squashing\u003c/h2\u003e\n\u003cp\u003eThere are a couple ways to squash your feature branch commits. If you want to\nsquash everything down to master and add a commit message you can use belly\u0026rsquo;s\n\u003ccode\u003eq\u003c/code\u003e command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebelly q my commit message\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"force-push-the-right-way\"\u003eForce-Push The Right Way\u003c/h2\u003e\n\u003cp\u003eWhen you work with rebasing and squashing in order to keep your Git history\nlegible you have to force-push in your feature branches regularly. Rather than\nusing \u003ccode\u003e--force-push\u003c/code\u003e it is recommended to use \u003ccode\u003e--force-push-with-lease\u003c/code\u003e which is\nan awkwardly named flag that does not allow you to force-push if the remote\nbranch has been updated by somebody else. This should be the default.\u003c/p\u003e\n\u003cp\u003eWith belly you can use:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebelly p\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eTo force-push-with-lease your current branch state.\u003c/p\u003e\n\u003cp\u003eIf you think any of these convenience methods would be useful to you, feel free\nto \u003ca href=\"https://github.com/kahlil/belly\"\u003eget belly\u003c/a\u003e. PRs are welcome, if discussed\npreviously in an issue.\u003c/p\u003e\n\u003cp\u003eI will be improving belly over time and add more features if I think it would be\nuseful.\u003c/p\u003e\n"
    },
    {
        "title" : "Reactive Podcast Episode 100: \"guts\" Was A Little Gross",
        "date_published" : "2018-07-16T18:16:13+02:00",
        "date_modified" : "2018-07-16T18:16:13+02:00",
        "id" : "https://www.kahlillechelt.com/2018/07/16/reactive-podcast-episode-100-guts-was-a-little-gross/",
        "url" : "https://www.kahlillechelt.com/2018/07/16/reactive-podcast-episode-100-guts-was-a-little-gross/",
        "content_html" : "\u003cp\u003eAfter a brief interruption:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWe are back! Henning talks about finally launching the first site with the \u0026ldquo;unified platform\u0026rdquo;. It\u0026rsquo;s a Vue.js app talking to multiple APIs. Kahlil wrote about enums and made a small CLI tool for common Git tasks called \u0026ldquo;belly\u0026rdquo;.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003ePick it up anywhere you get your podcasts or \u003ca href=\"http://reactive.audio/100\"\u003ejust listen in the browser\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "Enums For The Uninitiated",
        "date_published" : "2018-07-12T18:48:48+02:00",
        "date_modified" : "2018-07-12T18:48:48+02:00",
        "id" : "https://www.kahlillechelt.com/2018/07/12/enums-for-the-uninitiated/",
        "url" : "https://www.kahlillechelt.com/2018/07/12/enums-for-the-uninitiated/",
        "content_html" : "\u003cp\u003eBefore TypeScript I have never used or heard of enums. So needless to say when I saw them in the docs I was confused.\u003c/p\u003e\n\u003cp\u003eI was so used to describing the shape of data structures with interfaces that I didn’t understand what the benefits are of using enums.\u003c/p\u003e\n\u003cp\u003eI was also confused because enums hold values as well as being a type. I didn’t think of TypeScript as something that gives me things to hold values with.\u003c/p\u003e\n\u003cp\u003eSo in order to understand I had to look into it some more and here is how I understand enums:\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eEnums give you an easy way to logically group constants in order to make your code easier to read and understand.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eSo if you have a bunch of constant values in your program that logically belong together. Like the days of the week, directions (up, down, left, right) or return types of an asynchronous operation for example you can use enums to group them and use them in your code.\u003c/p\u003e\n\u003cp\u003eEnums give you type and data structure in one go without a lot of work.\u003c/p\u003e\n\u003cp\u003eIf you declare the following enum:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eenum Directions {\n  Up,\n  Down,\n  Left,\n  Right\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou are doing a bunch of things in one go:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDeclaring a type \u003ccode\u003eDirections\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eAssigning members to the enum\u003c/li\u003e\n\u003cli\u003eImplicitly assigning values to the members of the enum\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe assigned values are numbers by default. Starting at 0 and incremented with each following property.\u003c/p\u003e\n\u003cp\u003eSo it’s kind of like a JavaScript object just that values are assigned automatically.\u003c/p\u003e\n\u003cp\u003eYou can change the starting point of the assigned numbers by assigning a custom number to the first property.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eenum Directions {\n  Up = 1,\n  Down,\n  // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis means the increment starts at 1 instead of 0. That can be useful if you want to make sure that the first value can never be falsy.\u003c/p\u003e\n\u003cp\u003eYou can also manually assign values to all properties of the enum. They can be of type \u003ccode\u003enumber\u003c/code\u003e or \u003ccode\u003estring\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSo now you can go ahead and use these constants in your code like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif (direction === Directions.Up) {\n  // Do things.\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSimple and convenient.\u003c/p\u003e\n\u003cp\u003eThe TypeScript docs say this:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eEnums allow us to define a set of named constants. Using enums can make it easier to document intent, or create a set of distinct cases.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAfter having used enums a little bit in recent projects I find them very convenient and useful. I think especially \u0026ldquo;documenting intent\u0026rdquo; is what they do quite well in a convenient way.\u003c/p\u003e\n\u003cp\u003eOne cool thing about enums with numeric values, is that you can retrieve the member name of a numeric value by accessing it with the number, in our case accessing a \u003ccode\u003eDirections\u003c/code\u003e member with the number \u003ccode\u003e1\u003c/code\u003e returns the string \u003ccode\u003e\u0026quot;Up\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDirections[1] // returns \u0026quot;Up\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt\u0026rsquo;s cool but so far I have never needed it.\nTo make this possible during runtime enums get compiled to this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003evar Directions;\n(function (Directions) {\n    Directions[Directions[\u0026quot;Up\u0026quot;] = 0] = \u0026quot;Up\u0026quot;;\n})(Directions || (Directions = {}));\nvar direction = Directions.Up;\nvar nameOfA = Directions[direction]; // \u0026quot;Up\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIt\u0026rsquo;s an \u003ca href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\"\u003eiife\u003c/a\u003e that gets passed an object. That function then assigns numbers to the member names and member names to the numbers.\u003c/p\u003e\n\u003cp\u003eThis line does two things at the same time.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eDirections[Directions[\u0026quot;Up\u0026quot;] = 0] = \u0026quot;Up\u0026quot;;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003ccode\u003eDirections[\u0026quot;Up\u0026quot;] = 0\u003c/code\u003e assigns the number to the member name and because that line is a JavaScript expression it evaluates to a value and that value is the number that was assigned.\u003c/p\u003e\n\u003cp\u003eThis means that the whole line evaluates to \u003ccode\u003eDirections[0] = \u0026quot;Up\u0026quot;;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSo what you end up with in JavaScript is:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\n  0: \u0026quot;Up\u0026quot;,\n  Up: 0\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ePretty neat right? But let\u0026rsquo;s say resources are scarce and you don\u0026rsquo;t need to access member names then you can use \u003cem\u003e\u003ccode\u003econst\u003c/code\u003e enums\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eThey evaluate to their respective values. The enum code is completely removed during compilation. This means:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst enum Directions {\n  Up = 1,\n  Down\n}\n\nif (direction === Directions.Up) {\n  // Do things.\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIs compiled to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eif (direction === 1) {\n  // Do things.\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSo that\u0026rsquo;s my take on enums. After getting comfortable using enums for a bit, I find places where they can be useful all the time and I really like how they do make intent very explicit. Enums can make your code easier to read.\u003c/p\u003e\n"
    },
    {
        "title" : "Vanilla",
        "date_published" : "2018-06-26T09:20:35+02:00",
        "date_modified" : "2018-06-26T09:20:35+02:00",
        "id" : "https://www.kahlillechelt.com/2018/06/26/vanilla/",
        "url" : "https://www.kahlillechelt.com/2018/06/26/vanilla/",
        "content_html" : "\u003cp\u003e\u003ca href=\"http://vanilla.wolves.fm/r/Hy3YSOJGQ\"\u003eVanilla\u003c/a\u003e is a menubar Mac app that allows you to hide menubar items. It\u0026rsquo;s the first menubar icon management app that stuck with me. It is incredibly simple and just so cute!\u003c/p\u003e\n\u003cp\u003eWhen you launch it a little arrow and a dot appear in the menubar. You move the dot behind the last icon you want to hide and then click on the arrow. The arrow then swooshes over and lands on the spot where you put the dot with a nice little bouncy animation.\u003c/p\u003e\n\u003cp\u003eSuch a joy!\u003c/p\u003e\n"
    },
    {
        "title" : "accesskey",
        "date_published" : "2018-06-26T08:12:44+02:00",
        "date_modified" : "2018-06-26T08:12:44+02:00",
        "id" : "https://www.kahlillechelt.com/2018/06/26/accesskey/",
        "url" : "https://www.kahlillechelt.com/2018/06/26/accesskey/",
        "content_html" : "\u003cp\u003eWhile working on improving accessibility features of an application I learned about an HTML feature that I was not aware of before: \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey\"\u003ethe \u003ccode\u003eaccesskey\u003c/code\u003e attribute\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe attribute allows you to add keyboard shortcuts to an element.\u003c/p\u003e\n\u003cp\u003eIn order to assign a keyboard shortcut you add the \u003ccode\u003eaccesskey\u003c/code\u003e attribute to an element and assign it a letter. For instance the letter \u0026ldquo;a\u0026rdquo;, like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div accesskey=\u0026quot;a\u0026quot;\u0026gt; ... \u0026lt;/div\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThis automatically binds a shortcut to the element that either focuses it or triggers a click event.\u003c/p\u003e\n\u003cp\u003eThe actual shortcut varies between browsers and platforms but in general in modern browsers it is \u003ccode\u003ealt\u003c/code\u003e + \u003ccode\u003ea\u003c/code\u003e for Windows and Linux and \u003ccode\u003ealt\u003c/code\u003e + \u003ccode\u003ectrl\u003c/code\u003e + \u003ccode\u003ea\u003c/code\u003e on the Mac and \u003ccode\u003ealt\u003c/code\u003e + \u003ccode\u003eshift\u003c/code\u003e + \u003ccode\u003ea\u003c/code\u003e on Windows and Linux on Firefox.\u003c/p\u003e\n"
    },
    {
        "title" : "Godfrey",
        "date_published" : "2018-06-20T09:27:44+02:00",
        "date_modified" : "2018-06-20T09:27:44+02:00",
        "id" : "https://www.kahlillechelt.com/2018/06/20/godfrey/",
        "url" : "https://www.kahlillechelt.com/2018/06/20/godfrey/",
        "content_html" : "\u003cp\u003eGodfrey is a standup comic. I first found \u003ca href=\"https://www.youtube.com/watch?v=uk2Azl628Nw\"\u003ethis bit\u003c/a\u003e by him years ago on YouTube and loved it.\u003c/p\u003e\n\u003cp\u003eYesterday I stumbled upon \u003ca href=\"https://www.youtube.com/watch?v=lfYyoVa20mU\"\u003ehis little standup special on VladTV\u003c/a\u003e and was very excited to find it.\u003c/p\u003e\n\u003cp\u003eHe did not disappoint. It is a well paced, very comfortably delivered, hilarious 24min special. He killt it.\u003c/p\u003e\n"
    },
    {
        "title" : "MDX",
        "date_published" : "2018-06-15T09:36:19+02:00",
        "date_modified" : "2018-06-15T09:36:19+02:00",
        "id" : "https://www.kahlillechelt.com/2018/06/15/mdx/",
        "url" : "https://www.kahlillechelt.com/2018/06/15/mdx/",
        "content_html" : "\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/mdx-js/mdx\"\u003eMDX\u003c/a\u003e is a JSX in Markdown loader, parser, and renderer for ambitious projects. It combines the readability of Markdown with the expressivity of JSX. The best of both worlds.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIf you configure MDX for your project you can do wild things like importing React components into your markdown file and use them in there.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport Graph from './components/graph'\n\n## Here's a graph\n\n\u0026lt;Graph /\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAnd on the other hand you can import your MDX files into React components and use them as regular React components.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport React from 'react'\nimport Hello from '../hello.md'\n\nexport default () =\u0026gt; \u0026lt;Hello /\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ePowerful stuff. If you are a developer building something with React or Next.js and you want to add content to the project, that\u0026rsquo;s a really nice way to do it. It feels kind of mind blowing once you use it.\u003c/p\u003e\n\u003cp\u003eMDX is a superset of the \u003ca href=\"http://commonmark.org/\"\u003eCommonMark\u003c/a\u003e specification that adds embedded JSX and the \u003ccode\u003eimport/export\u003c/code\u003e syntax.\u003c/p\u003e\n\u003cp\u003eCommonMark was created by the people who built Discourse. They support Markdown on their platform and they needed a clear specification that handles certain edge cases. \u003ca href=\"https://daringfireball.net/projects/markdown/syntax\"\u003eThe original specification by John Gruber\u003c/a\u003e was not specific enough. At first they wanted to call it \u003ca href=\"https://blog.codinghorror.com/standard-flavored-markdown/\"\u003eStandard Markdown\u003c/a\u003e but \u003ca href=\"https://blog.codinghorror.com/standard-markdown-is-now-common-markdown/\"\u003eGruber threw a hissyfit, wrote an angry email\u003c/a\u003e and even talked about it on his podcast The Talkshow.\u003c/p\u003e\n\u003cp\u003eDiscourse never sought to upset him or take anything away from him so they renamed it to CommonMark.\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s great to see that things like MDX can be built quite safely and relatively easy because there is a Markdown specification.\u003c/p\u003e\n"
    },
    {
        "title" : "Nested Loops at the JSConf EU 2018 Opening Performance",
        "date_published" : "2018-06-11T19:59:31+02:00",
        "date_modified" : "2018-06-11T19:59:31+02:00",
        "id" : "https://www.kahlillechelt.com/2018/06/11/nested-loops-at-the-jsconf-eu-2018-opening-performance/",
        "url" : "https://www.kahlillechelt.com/2018/06/11/nested-loops-at-the-jsconf-eu-2018-opening-performance/",
        "content_html" : "\u003cp\u003eOnce again \u003ca href=\"http://twitter.com/bonotes\"\u003eBoris\u003c/a\u003e, \u003ca href=\"http://twitter.com/thedeftone\"\u003eJan\u003c/a\u003e and me have been honored by the organizers of JSConf EU to participate in this year\u0026rsquo;s opening performance of the conference as \u003ca href=\"https://nestedloops.github.io\"\u003eNESTED LOOPS\u003c/a\u003e. That’s the name of the band we formed when we did the opening for the first time in \u003ca href=\"http://youtu.be/lJ1kY-CSpBk\"\u003e2015\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThank you for letting us do this. The result was quite epic if I may say so. I don’t think the video really does it justice. The screen was so huuuuuuge!\u003c/p\u003e\n\n\u003cp\u003e\n  \u003cdiv style=\"position: relative; padding-bottom: 56.25%; padding-top: 0; height: 0; overflow: hidden;\"\u003e\n    \u003ciframe src=\"https://www.youtube.com/embed/e6wrCr7bzSg\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" allowfullscreen frameborder=\"0\"\u003e\u003c/iframe\u003e\n  \u003c/div\u003e\n\u003c/p\u003e\n"
    },
    {
        "title" : "Reactive 99: 👋😭 @rockbot",
        "date_published" : "2018-05-23T20:16:37+02:00",
        "date_modified" : "2018-05-23T20:16:37+02:00",
        "id" : "https://www.kahlillechelt.com/2018/05/23/reactive-99-rockbot/",
        "url" : "https://www.kahlillechelt.com/2018/05/23/reactive-99-rockbot/",
        "content_html" : "\u003cblockquote\u003e\n\u003cp\u003eThis is Raquel\u0026rsquo;s farewell episode. Sadly she is leaving the podcast as a co-host. But don\u0026rsquo;t fret, she will join us every once-in-a-while to tell us about her adventures at Slack and quirky animals.\u003c/p\u003e\n\u003cp\u003eOther than that your three fav co-hosts chop it up about what\u0026rsquo;s going on at Slack right now, various conferences they are going to, social media nowadays, the only thing Facebook is actually good for and the arrival of the animal of the week at Slack planning meetings.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIt is true. Raquel left the pod. It is sad. But at the same time it is an opportunity. Me and Henning will keep on going no matter what and we are on the search for a new co-host. Suggestions welcome.\u003c/p\u003e\n"
    },
    {
        "title" : "Chopping It Up With Henning",
        "date_published" : "2018-04-12T08:32:08+02:00",
        "date_modified" : "2018-04-12T08:32:08+02:00",
        "id" : "https://www.kahlillechelt.com/2018/04/12/chopping-it-up-with-henning/",
        "url" : "https://www.kahlillechelt.com/2018/04/12/chopping-it-up-with-henning/",
        "content_html" : "\u003cp\u003eWe\u0026rsquo;ve been having a bit of a break on the Reactive Podcast.\nThe break was involuntary and just caused by normal life stuff.\n\u003cem\u003eBut\u003c/em\u003e we are working on getting back on track. Henning and I managed to\nput out a couple of episodes in which we chop it up about various things.\u003c/p\u003e\n\u003cp\u003eThe topics vary from what we\u0026rsquo;re working on currently to other random stuff that shot through our heads while recording the podcast.\u003c/p\u003e\n\u003cp\u003eCheck out \u003ca href=\"http://reactive.audio/97\"\u003e97: A Smoother-ish On-Boarding Process\u003c/a\u003e and \u003ca href=\"http://reactive.audio/98\"\u003e98: It\u0026rsquo;s Tiring Too, But It\u0026rsquo;s Good\u003c/a\u003e everywhere where you like to get your podcasts (unless its Spotify, we\u0026rsquo;re not on Spotify).\u003c/p\u003e\n"
    },
    {
        "title" : "New Job, Who Dis?",
        "date_published" : "2018-04-11T17:27:12+02:00",
        "date_modified" : "2018-04-11T17:27:12+02:00",
        "id" : "https://www.kahlillechelt.com/2018/04/11/new-job-who-dis/",
        "url" : "https://www.kahlillechelt.com/2018/04/11/new-job-who-dis/",
        "content_html" : "\u003cp\u003eLast month I started working at LogMeIn as a Staff Software Engineer. My team is working on the web version of GoToMeeting. We are migrating legacy code to a new, modern tech stack, while improving the product as well as working on features.\u003c/p\u003e\n\u003cp\u003eThe new tech stack consists of TypeScript, React, Redux \u0026amp; redux-observable.\u003c/p\u003e\n\u003cp\u003eComing from Angular, not being super-fond of the complexity of the framework, I was expecting to enter the lands of simplicity with React and Redux. Little did I know what was about to transpire right into my face!\u003c/p\u003e\n\u003cp\u003eUsing React with the canoncial way of using Redux is so far off straight-forward, you get dizzy just thinking about it. I honestly felt reminded of Angular\u0026rsquo;s abstraction hell.\u003c/p\u003e\n\u003cp\u003eI always felt that the concept of Redux actually fits much better into a Reactive Programming paradigm. That\u0026rsquo;s why I built \u003ca href=\"https://github.com/kahlil/flow-state\"\u003eflow-state\u003c/a\u003e and never reached for the original Redux.\u003c/p\u003e\n\u003cp\u003eReactive Programming allows you to granularly manage how, when and under which conditions the new state should reach the components. This means you can just set the framework to re-render whenever new state reaches, no other checks necessary.\u003c/p\u003e\n\u003cp\u003eBut I digress, so, new job. So far so good. Lots to learn. I like the team and I \u003cem\u003edo\u003c/em\u003e like working with React etc. We\u0026rsquo;ll see where this leads to.\u003c/p\u003e\n"
    },
    {
        "title" : "Just One Link",
        "date_published" : "2018-02-16T17:29:24+01:00",
        "date_modified" : "2018-02-16T17:29:24+01:00",
        "id" : "https://www.kahlillechelt.com/2018/02/16/just-one-link/",
        "url" : "https://www.kahlillechelt.com/2018/02/16/just-one-link/",
        "content_html" : "\u003cp\u003eMany designers and developers are taking the time, in various forms, to curate link-list-newsletters.\u003c/p\u003e\n\u003cp\u003eThey contain 5-ish links in fat type with a low-contrast small-type link description below each link.\u003c/p\u003e\n\u003cp\u003eOver time I have subscribed to many of those and although I appreciate the work that people put into them, they have lost their value to me.\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s their sameness. I also don\u0026rsquo;t know why the author has chosen those links. Did they actually read the content? Why do they think it is important?\u003c/p\u003e\n\u003cp\u003eI don\u0026rsquo;t even know which is which anymore. I just see a link list, maybe read a couple link titles and am back to whatever I was doing.\u003c/p\u003e\n\u003cp\u003eThere is nothing that keeps me in the mail and it has become \u003cem\u003ework\u003c/em\u003e to figure out which link \u003cem\u003ecould\u003c/em\u003e be interesting for me to check out.\u003c/p\u003e\n\u003cp\u003eThis is what I would like to see instead:\u003c/p\u003e\n\u003cp\u003eSend an email with just one link. Write a paragraph about why you are sending out this link. Why does it excite/interest/enrage you?\u003c/p\u003e\n\u003cp\u003eLet me read your voice.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;d be thrilled to receive your newsletter and read it every time.\u003c/p\u003e\n"
    },
    {
        "title" : "96: Without Cheese You Are Nothing",
        "date_published" : "2018-02-07T13:45:00+01:00",
        "date_modified" : "2018-02-07T13:45:00+01:00",
        "id" : "https://www.kahlillechelt.com/2018/02/07/96-without-cheese-you-are-nothing/",
        "url" : "https://www.kahlillechelt.com/2018/02/07/96-without-cheese-you-are-nothing/",
        "content_html" : "\u003cblockquote\u003e\n\u003cp\u003eHenning and Raquel talk about, the Poison Dart Frog, moving cheese, when to maintain and when to develop features, a laptop theft ring and the fact that Slack is mostly PHP 😱\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAnother stellar conversation between my incredible co-hosts \u003ca href=\"http://twitter.com/rockbot\"\u003eRaquel\u003c/a\u003e and \u003ca href=\"http://twitter.com/hglattergotz\"\u003eHenning\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "[DE] Revision 328: Web Components",
        "date_published" : "2018-02-07T13:34:47+01:00",
        "date_modified" : "2018-02-07T13:34:47+01:00",
        "id" : "https://www.kahlillechelt.com/2018/02/07/de-revision-328-web-components/",
        "url" : "https://www.kahlillechelt.com/2018/02/07/de-revision-328-web-components/",
        "content_html" : "\u003cblockquote\u003e\n\u003cp\u003eInspiriert durch einen Artikel von Mikeal Rogers berichtet Kahlil von seiner Begeisterung für Web Components. Neben konkreten Webstandards wie Custom Elements, Shadow DOM, Template-Elementen und HTML Imports (RIP) und Tools im Stile von Polymer und dem CDN unpkg treibt uns auch die Frage nach dem Warum und den möglichen Vorteilen von Web Components um.\u003c/p\u003e\n\u003cp\u003eWährend Kahlil in Web Components, kombiniert mit modernen Template-Libraries (lit-html, hyperHTML/viperHTML) bzw. Data Binding für Template Elemente (wie in Revision 319 besprochen) eine Alternative zu bzw. neue Basis für Frontend-JS-Frameworks sieht – zu nennen wären neben Polymer X-Tag und Stencil – ist Peter weniger euphorisch.\u003c/p\u003e\n\u003cp\u003eDie durch Web Components hergestellte Interoperabilität von Komponenten kann ein großes Plus sein (EA-Erfahrungsbericht bei der Polymer-Conf), doch wie oft sich das wirklich positiv zu Buche schlägt, bleibt dahingestellt. Peter setzt selbst Web Components ein (html-import, scoped-style), sieht sie jedoch nur als eine für sehr bestimmte Anwendungsfälle brauchbare HTML-Abstraktion, quasi das jQuery-Plugin 2.0.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eHabe beim Working Draft Podcast ein wenig über Web Components herum gestammelt. Shoutout an \u003ca href=\"http://twitter.com/sir_pepe\"\u003ePeter\u003c/a\u003e und \u003ca href=\"http://twitter.com/drublic\"\u003eHans\u003c/a\u003e für\u0026rsquo;s aushalten!\u003c/p\u003e\n"
    },
    {
        "title" : "Stimulus: A modest JavaScript framework for the HTML you already have",
        "date_published" : "2018-02-01T13:43:02+01:00",
        "date_modified" : "2018-02-01T13:43:02+01:00",
        "id" : "https://www.kahlillechelt.com/2018/02/01/stimulus-a-modest-javascript-framework-for-the-html-you-already-have/",
        "url" : "https://www.kahlillechelt.com/2018/02/01/stimulus-a-modest-javascript-framework-for-the-html-you-already-have/",
        "content_html" : "\u003cblockquote\u003e\n\u003cp\u003eStimulus works by continuously monitoring the page, waiting for the magic data-controller attribute to appear. Like the class attribute, you can put more than one value inside it. But instead of applying or removing CSS class names, data-controller values connect and disconnect Stimulus controllers.\u003c/p\u003e\n\u003cp\u003eThink of it like this: in the same way that class is a bridge connecting HTML to CSS, data-controller is a bridge from HTML to JavaScript.\u003c/p\u003e\n\u003cp\u003eOn top of this foundation, Stimulus adds the magic data-action attribute, which describes how events on the page should trigger controller methods, and the magic data-target attribute, which gives you a handle for finding elements in the controller’s scope.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eStimulus offers a very simple, elegant and concise way to upgrade your server-rendered site with JavaScript.\u003c/p\u003e\n\u003cp\u003eOnce you see it, you think: \u0026ldquo;Wow, why didn\u0026rsquo;t anybody come up with this earlier?\u0026quot;.\u003c/p\u003e\n\u003cp\u003eTo be fair: a big part of the elegance is to be able to use ES2015 classes.\u003c/p\u003e\n\u003cp\u003eAnd to be even fairer: other people had similar ideas way before Basecamp. \u003ca href=\"https://flightjs.github.io/\"\u003eFlight by Twitter\u003c/a\u003e for instance has a similar approach, but IMHO it was stuck in the past already a few years ago and it is not under active development anymore.\u003c/p\u003e\n\u003cp\u003eStimulus is basically the better, modern version of Flight.\u003c/p\u003e\n\u003cp\u003eFun fact: it turns out that Google is using almost identical patterns to Stimulus in most of their consumer facing web apps, since years:\u003c/p\u003e\n\u003cp\u003eMalte Ubl, head honcho of Google AMP on Twitter:\u003c/p\u003e\n\u003cblockquote class=\"twitter-tweet\"\u003e\u003cp lang=\"en\" dir=\"ltr\"\u003eThis is almost identical to Wiz which runs most of Google\u0026#39;s consumer web apps.\u003c/p\u003e\u0026mdash; Malte Ubl (@cramforce) \u003ca href=\"https://twitter.com/cramforce/status/958539611621355520?ref_src=twsrc%5Etfw\"\u003eJanuary 31, 2018\u003c/a\u003e\u003c/blockquote\u003e\n\u003cscript async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"\u003e\u003c/script\u003e\n\n\u003cp\u003eMalte also said they decided against open sourcing it \u003ca href=\"https://twitter.com/cramforce/status/958696304149868545\"\u003eyears ago\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhich I would argue, is not a bad thing. Basecamp found a much nicer name, they made a really beautiful website for it and\nthe writing in the Stimulus handbook is really great! I doubt Google would have done as good of a job at that.\u003c/p\u003e\n"
    },
    {
        "title" : "",
        "date_published" : "2018-01-30T09:58:15+01:00",
        "date_modified" : "2018-01-30T09:58:15+01:00",
        "id" : "https://www.kahlillechelt.com/2018/01/30/micro-blog/",
        "url" : "https://www.kahlillechelt.com/2018/01/30/micro-blog/",
        "content_html" : "\u003cp\u003eThis is a micro blog post. A blog post without a title that\nhas 280 characters or less. All my blog posts and micro blog posts are distributed\nto \u003ca href=\"http://micro.blog/ka\"\u003emy Micro.blog account\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "Reactive 95: Career Pro Tip: Make Yourself Irrelevant",
        "date_published" : "2018-01-29T20:41:05+01:00",
        "date_modified" : "2018-01-29T20:41:05+01:00",
        "id" : "https://www.kahlillechelt.com/2018/01/29/reactive-95/",
        "url" : "https://www.kahlillechelt.com/2018/01/29/reactive-95/",
        "content_html" : "\u003cblockquote\u003e\n\u003cp\u003eHenning and Raquel talk about The Swamp Hackathon, working at Slack and a book called Punished By Reward.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eI couldn\u0026rsquo;t make it on this episode because of my new flamingo farm, but I really enjoyed\nthe discussion my two co-hosts were having there.\u003c/p\u003e\n"
    },
    {
        "title" : "Reactive 94: There Are So Many Channels In The Slack Slack",
        "date_published" : "2018-01-29T17:23:51+01:00",
        "date_modified" : "2018-01-29T17:23:51+01:00",
        "id" : "https://www.kahlillechelt.com/2018/01/29/reactive-94/",
        "url" : "https://www.kahlillechelt.com/2018/01/29/reactive-94/",
        "content_html" : "\u003cblockquote\u003e\n\u003cp\u003eWe\u0026rsquo;re back and talk about Raquel working at Slack, Henning and the hackathon, blockchain, Kahlil\u0026rsquo;s new Electron app and Bootstrap 4.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eOur first episode this year!\u003c/p\u003e\n"
    },
    {
        "title" : "electron-serve",
        "date_published" : "2018-01-26T17:23:51+01:00",
        "date_modified" : "2018-01-26T17:23:51+01:00",
        "id" : "https://www.kahlillechelt.com/2018/01/26/electron-serve/",
        "url" : "https://www.kahlillechelt.com/2018/01/26/electron-serve/",
        "content_html" : "\u003cp\u003eIn a default setup, Electron serves the app\u0026rsquo;s index.html file directly from disk with the \u003ccode\u003efile://\u003c/code\u003e protocol. This does not work well with JavaScript apps that want to use client-side routing.\u003c/p\u003e\n\u003cp\u003eThe browser does not support \u003ccode\u003ehistory.pushState\u003c/code\u003e for files served from disk. This means every time you navigate to a different route with a client-side router it will try to resolve the path on disk which leads to a 404.\u003c/p\u003e\n\u003cp\u003eThankfully earlier this year, \u003ca href=\"http://twitter.com/sindresorhus\"\u003e@sindresorhus\u003c/a\u003e published \u003ca href=\"https://github.com/sindresorhus/electron-serve\"\u003eelectron-serve\u003c/a\u003e. This package registers a custom file protocol called \u003ccode\u003eapp://\u003c/code\u003e with a slightly tweaked behavior to \u003ccode\u003efile://\u003c/code\u003e:\u003c/p\u003e\n\u003cp\u003eIt serves a file if it exists and serves index.html as a fallback if it doesn\u0026rsquo;t.\u003c/p\u003e\n\u003cp\u003eThis makes it possible for client-side routers to process routes and for the app to respond to them without having to spin up a server in your Electron app.\u003c/p\u003e\n\u003cp\u003eOne thing I had to do to get it to work though was to pass a fully resolved path to the \u003ccode\u003erequire\u003c/code\u003e call for my entry file. I used \u003ccode\u003epath.resolve\u003c/code\u003e to do that. It did not work with a regular relative path like \u003ccode\u003erequire('./renderer')\u003c/code\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "Keeping TypeScript Benefits In A JavaScript Project With Visual Studio Code",
        "date_published" : "2018-01-25T00:11:10Z",
        "date_modified" : "2018-01-25T00:11:10Z",
        "id" : "https://www.kahlillechelt.com/2018/01/25/keeping-typescript-benefits-in-a-javascript-project-with-visual-studio-code/",
        "url" : "https://www.kahlillechelt.com/2018/01/25/keeping-typescript-benefits-in-a-javascript-project-with-visual-studio-code/",
        "content_html" : "\u003cp\u003eWhen I started \u003ca href=\"https://www.producthunt.com/upcoming/grit\"\u003eGrit\u003c/a\u003e I was excited to find out that the Electron team is shipping types with Electron which expose the Electron API in your tooling. Since I am a fan of TypeScript I set up my dev environment to write my code in TypeScript as well.\u003c/p\u003e\n\u003cp\u003eAfter a few days of writing TS code to transpile it for my app, I started to get annoyed with the fact that I am transpiling code. And here is the reason:\u003c/p\u003e\n\u003cp\u003eIn Electron you write code for a very capable browser. ES2015 is fully implemented minus ES Modules. That means the code I can write for the browser directly is already so close to ideal for me that it felt wrong to transpile from something else. So I converted my project back to JavaScript.\u003c/p\u003e\n\u003cp\u003eAfter years of dealing with Babel and TypeScript, writing ES2015+ code directly for the browser feels very freeing.\u003c/p\u003e\n\u003cp\u003eNo source maps to decode, no types to manage.\u003c/p\u003e\n\u003cp\u003eLosing the types would be a little annoying though. For me personally, in this one-man-project, I enjoy the types especially because they enhance the tooling.\u003c/p\u003e\n\u003cp\u003eThankfully there is VSCode!\u003c/p\u003e\n\u003cp\u003eVSCode has introduced something that is called \u003ca href=\"https://code.visualstudio.com/docs/languages/jsconfig\"\u003e\u003ccode\u003ejsconfig.json\u003c/code\u003e\u003c/a\u003e. It\u0026rsquo;s a configuration file that tells VSCode that the folder containing it is a JavaScript project.\u003c/p\u003e\n\u003cp\u003eFrom \u003ca href=\"https://code.visualstudio.com/docs/languages/jsconfig\"\u003ecode.visualstudio.com\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003ejsconfig.json\u003c/code\u003e is a descendent of \u003ccode\u003etsconfig.json\u003c/code\u003e, which is a configuration file for TypeScript. \u003ccode\u003ejsconfig.json\u003c/code\u003e is the \u003ccode\u003etsconfig.json\u003c/code\u003e with the \u003ccode\u003e\u0026quot;allowJs\u0026quot;\u003c/code\u003e attribute set to true.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAdding that file tells VSCode to turn on the \u003ca href=\"https://github.com/Microsoft/TypeScript/wiki/JavaScript-Language-Service-in-Visual-Studio\"\u003eJavaScript Language Service\u003c/a\u003e which is based on the TypeScript Language Service. This gives you powerful Intellisense features throughout the project.\u003c/p\u003e\n\u003cp\u003eThis means you get autocompletion and type errors for a normal JavaScript project. Types are being inferred by TypeScript type definition files as well as JSDoc comments.\u003c/p\u003e\n\u003ch2 id=\"setting-up-jsconfigjson-for-electron\"\u003eSetting up jsconfig.json For Electron\u003c/h2\u003e\n\u003cp\u003eIn order to get it to work satisfyingly for my Electron setup, I had to configure a few things.\njsconfig.json is just a tsconfig.json so the options are the same.\u003c/p\u003e\n\u003cp\u003eFirst of all, I excluded \u003ccode\u003enode_modules\u003c/code\u003e since I don\u0026rsquo;t want VSCode to type check all my dependencies.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026quot;exclude\u0026quot;: [\u0026quot;node_modules\u0026quot;]\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn the \u003ccode\u003ecompileroptions\u003c/code\u003e property, I set the \u003ccode\u003echeckJs\u003c/code\u003e property to \u003ccode\u003etrue\u003c/code\u003e so that the JavaScript code is type checked as much as possible.\u003c/p\u003e\n\u003cp\u003eBecause I (have to) use CommonJS Modules in Electron I had to set the \u003ccode\u003emodule\u003c/code\u003e property to \u003ccode\u003ecommonjs\u003c/code\u003e so that \u003ccode\u003eindex.js\u003c/code\u003e files are resolved CommonJS-style.\u003c/p\u003e\n\u003cp\u003eAnd last but not least in order to be able to write ES2015+ code without warnings I set the \u003ccode\u003etarget\u003c/code\u003e property to \u003ccode\u003ees2017\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYou can have a look at my config file \u003ca href=\"https://github.com/kahlil/grit/blob/master/jsconfig.json\"\u003eright here\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"adding-a-type-definition-for-hyperhtmlelement\"\u003eAdding A Type Definition For HyperHTMLElement\u003c/h2\u003e\n\u003cp\u003eI had to create a type definitions file for HyperHTMLElement because the JavaScript Language Service didn\u0026rsquo;t like me having to use the \u003ccode\u003edefault\u003c/code\u003e property on the required module. This is the code in question:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst HyperHTMLElement = require('hyperhtml-element').default;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI went to the trouble to actually add all the class properties in the definition which gives me the sweet sweet code completion feature in VSCode. If you need it you can pick it up from \u003ca href=\"https://github.com/kahlil/grit/blob/master/types/hyperhtml-element.d.ts\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis setup allows me to write modern JavaScript code directly for the browser as well as benefit from many TypeScript features. Love it.\u003c/p\u003e\n"
    },
    {
        "title" : "Building Grit",
        "date_published" : "2018-01-18T21:00:00Z",
        "date_modified" : "2018-01-18T21:00:00Z",
        "id" : "https://www.kahlillechelt.com/2018/01/18/building-grit/",
        "url" : "https://www.kahlillechelt.com/2018/01/18/building-grit/",
        "content_html" : "\u003cp\u003eStatic Site CMS is now \u003ca href=\"https://github.com/kahlil/grit\"\u003eGrit\u003c/a\u003e. I wanted to give it a name because I want to keep writing about building this thing and Static Site CMS is a shitty name.\u003c/p\u003e\n\u003cp\u003eGrit will be a Markdown editor for managing blog posts for your static site. There is nothing to see yet, I am still working on the MVP.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;ll be writing a series of posts about the process of building Grit. The titles of these blog posts will be prefixed with \u0026ldquo;Building Grit:\u0026quot;.\u003c/p\u003e\n\u003cp\u003eI am using Electron, Web Components, a bunch of packages by Sindre Sorhus and a Router called Navigo to build Grit. I am constantly learning new things and I am looking forward to sharing them here.\u003c/p\u003e\n\u003ch2 id=\"why-grit\"\u003eWhy Grit?\u003c/h2\u003e\n\u003cp\u003eIt has two meanings.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003edirt\u003c/li\u003e\n\u003cli\u003edetermination despite difficulty\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eNamely the second meaning is very fitting since it takes real grit to keep a blog going. Using Grit is supposed to remove some of the friction that comes with blogging on a static site, which should help you having the grit to keep going.\u003c/p\u003e\n\u003cp\u003eBut to be quite honest “dirt” is fitting as well since this software will be quite rough around the edges for a while lol.\u003c/p\u003e\n\u003ch2 id=\"gritty-road\"\u003eGritty Road\u003c/h2\u003e\n\u003cp\u003eThe road ahead for Grit is simple. I am in the process of building a simple MVP with an extremely limited feature set and we go from there.\u003c/p\u003e\n\u003cp\u003eLet me know if you’re interested in trying it out! ✌️\u003c/p\u003e\n"
    },
    {
        "title" : "",
        "date_published" : "2018-01-18T20:00:00Z",
        "date_modified" : "2018-01-18T20:00:00Z",
        "id" : "https://www.kahlillechelt.com/2018/01/18/",
        "url" : "https://www.kahlillechelt.com/2018/01/18/",
        "content_html" : "\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://www.learnrxjs.io\"\u003elearnrx.io →\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eFinally some human-friendly docs about RxJS. Huge effort by \u003ca href=\"https://twitter.com/BTroncone\"\u003eBrian Troncone\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "Switching To hyperHTML And HyperHTMLElement",
        "date_published" : "2018-01-10T00:00:00Z",
        "date_modified" : "2018-01-10T00:00:00Z",
        "id" : "https://www.kahlillechelt.com/2018/01/10/switching-to-hyperhtml-and-hyperhtmlelement/",
        "url" : "https://www.kahlillechelt.com/2018/01/10/switching-to-hyperhtml-and-hyperhtmlelement/",
        "content_html" : "\u003cp\u003eWhen starting work on \u003ca href=\"https://www.kahlillechelt.com/post/2018/01/05/working-title-static-site-cms/\"\u003eStatic Site CMS\u003c/a\u003e I originally planned on using Custom Components and lit-html instead of a JavaScript framework.\u003c/p\u003e\n\u003cp\u003eIn the process of setting up my development environment I was a little annoyed to realize that lit-html can only be used with ES Modules and not with CommonJS modules. Since Electron uses CommonJS that is a requirement for my current project.\u003c/p\u003e\n\u003cp\u003eI heard that hyperHTML basically does the same thing as lit-html so I went and checked it out.\u003c/p\u003e\n\u003cp\u003eI was very happy to discover that not only does hyperHTML do basically the same thing as lit-html, it also supports all module types and as a bonus there is a little ecosystem around it that enhances Custom Elements and even supports server side rendering. What?! Nice! See a chart that compares the two \u003ca href=\"https://gist.github.com/WebReflection/fadcc419f5ccaae92bc167d8ff5c611b\"\u003eright here\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/WebReflection/hyperHTML-Element\"\u003eHyperHTMLElement\u003c/a\u003e is a Custom Element subclass that is exactly what I just had started to do with \u003ca href=\"https://github.com/kahlil/kaf/blob/master/js/util/lit-element.js\"\u003eLitElement\u003c/a\u003e, only better. The author \u003ca href=\"https://www.twitter.com/WebReflection\"\u003e@WebReflection\u003c/a\u003e knows these emerging web standards very well and does an amazing job making them really usable and useful today.\u003c/p\u003e\n\u003cp\u003eIn turn @WebReflection \u003ca href=\"https://github.com/WebReflection/hyperHTML/issues/107#issuecomment-339651380\"\u003eis not a fan of TypeScript\u003c/a\u003e so neither hyperHTML nor HyperHTMLElement have type definitions.\nSince I decided to use TypeScript in my app I created a simple type definition file for HyperHTMLElement. I didn\u0026rsquo;t add it to @types yet but you can grab it \u003ca href=\"https://github.com/kahlil/static-site-cms/blob/master/types/hyperhtml-element/index.d.ts\"\u003efrom my project right here\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAll in all lit-html and hyperHTML are very similar in what they do. The biggest difference at the moment is that hyperHTML is more complete and feels more mature, not to mention the addition of HyperHTMLElement and server side rendering via \u003ca href=\"https://viperhtml.js.org/viper.html\"\u003eViperHTML\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "Working Title: Static Site CMS",
        "date_published" : "2018-01-05T00:00:00Z",
        "date_modified" : "2018-01-05T00:00:00Z",
        "id" : "https://www.kahlillechelt.com/2018/01/05/working-title-static-site-cms/",
        "url" : "https://www.kahlillechelt.com/2018/01/05/working-title-static-site-cms/",
        "content_html" : "\u003cp\u003eProduct development has always been of huge interest to me. I love creating something with web technologies that solves a problem and iterating on it. That is basically what I do at work but I always wanted to have my own thing.\u003c/p\u003e\n\u003cp\u003eDuring the last year I have played around with a couple of ideas  while trying out different JavaScript frameworks. Altogether I think I must have at least started working on 4 or 5 things. Among those I made two small barely usable products: \u003ca href=\"https://www.tinydraft.net\"\u003eTinyDraft\u003c/a\u003e and \u003ca href=\"https://kaf.kahlillechelt.com\"\u003eKaf\u003c/a\u003e. They are very simple and incomplete but they do implement a very minimal use case quite OK.\u003c/p\u003e\n\u003cp\u003eI always end up hitting a wall when it comes to adding a backend with database, authentication and authorization. Typically I would use services for that. But since I really just get to work on my personal stuff on the road during my commute I can\u0026rsquo;t easily add any services. My connectivity is very limited during those train rides.\u003c/p\u003e\n\u003cp\u003eI also tried out using Hoodie which is great to work with locally but deploying a Hoodie backend wasn\u0026rsquo;t trivial to me and ultimately I only really want to think about the frontend side and have the backend just work and be there in local development as well as in production.\u003c/p\u003e\n\u003cp\u003eSo these products are going nowhere.\u003c/p\u003e\n\u003cp\u003eI realized in order to build and iterate on anything during my very limited free time I have to remove as much friction as possible. The solution to that problem came to me just a couple weeks ago.\u003c/p\u003e\n\u003cp\u003eRecently I hooked up \u003ca href=\"https://www.netlifycms.org/\"\u003eNetlifyCMS\u003c/a\u003e to my site. It uses Netlify\u0026rsquo;s auth service and GitHub to add posts to your site. If you set up automatic deployment via GitHub on Netlify that is a really great solution to adding posts to a static site through a nice UI.\u003c/p\u003e\n\u003cp\u003eBut here I had the same problem. I write my stuff on the road and I can\u0026rsquo;t rely on being online. But I really liked some of the functionality that NetlifyCMS provided, namely the scaffolding of posts, easy Front Matter editing as well as the automatic Git commit functionality.\u003c/p\u003e\n\u003cp\u003eI thought to myself: \u0026ldquo;That\u0026rsquo;s cool, I wish I had that for the desktop.\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s the moment when it clicked! I could make this myself with Electron! I actually love working on Electron apps and I would be solving a problem for myself as well as removing my above-mentioned friction from app building. This type of Electron app can be developed without being online at all. Hooray!\u003c/p\u003e\n\u003cp\u003eI have started working on this over the holidays and I am developing it in the open, the code is \u003ca href=\"https://github.com/kahlil/static-site-cms\"\u003eon GitHub\u003c/a\u003e and I will be posting about my progress here.\u003c/p\u003e\n\u003cp\u003eFor now the product really does not have a name. The working title is Static Site CMS.\u003c/p\u003e\n\u003cfigure\u003e\n    \u003cimg src=\"/img/static-site-cms.png\"\n         alt=\"The empty state\"/\u003e \u003cfigcaption\u003e\n            \u003cp\u003eThe empty state\u003c/p\u003e\n        \u003c/figcaption\u003e\n\u003c/figure\u003e\n\n\u003cp\u003eIn my next post I will be writing about the setup I am using to build it.\u003c/p\u003e\n"
    },
    {
        "title" : "Template Instantiation",
        "date_published" : "2017-12-20T00:00:00Z",
        "date_modified" : "2017-12-20T00:00:00Z",
        "id" : "https://www.kahlillechelt.com/2017/12/20/template-instantiation/",
        "url" : "https://www.kahlillechelt.com/2017/12/20/template-instantiation/",
        "content_html" : "\u003cp\u003eHappily stumbled upon this little video by \u003ca href=\"https://twitter.com/dassurma\"\u003e@dassurma\u003c/a\u003e and \u003ca href=\"https://twitter.com/jaffathecake\"\u003e@jaffathecake\u003c/a\u003e. Apparently there is a template instantiation proposal out there somewhere that would add \u003ca href=\"http://npmjs.com/lit-html\"\u003elit-html\u003c/a\u003e / \u003ca href=\"http://npmjs.com/hyperhtml\"\u003ehyperHMTL\u003c/a\u003e - like functionality to the template element.\u003c/p\u003e\n\u003cp\u003eThis would be huge if it made it into the platform. This would mean that Web Components would be complete because, \u003ca href=\"https://www.kahlillechelt.com/post/2017/12/14/use-web-components-to-build-javascript-apps/\"\u003eas I outlined before\u003c/a\u003e, the only web standard missing for them to be useful out of the box is an API like lit-html that allows for their DOM to be rendered over and over again in an efficient way.\u003c/p\u003e\n\u003cp\u003eHere the (extremely short) video for your viewing pleasure:\u003c/p\u003e\n\n\u003cp\u003e\n  \u003cdiv style=\"position: relative; padding-bottom: 56.25%; padding-top: 0; height: 0; overflow: hidden;\"\u003e\n    \u003ciframe src=\"https://www.youtube.com/embed/tx0BtNO3gmk\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" allowfullscreen frameborder=\"0\"\u003e\u003c/iframe\u003e\n  \u003c/div\u003e\n\u003c/p\u003e\n"
    },
    {
        "title" : "ZeroFux - A Stateless Unidirectional Data Flow Implemented With Custom Events",
        "date_published" : "2017-12-20T00:00:00Z",
        "date_modified" : "2017-12-20T00:00:00Z",
        "id" : "https://www.kahlillechelt.com/2017/12/20/zerofux-a-stateless-unidirectional-data-flow-implemented-with-custom-events/",
        "url" : "https://www.kahlillechelt.com/2017/12/20/zerofux-a-stateless-unidirectional-data-flow-implemented-with-custom-events/",
        "content_html" : "\u003cp\u003eUndirectional Data Flow, Flux, Redux, Whateverux is essentially this:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003esomething happens\u003c/li\u003e\n\u003cli\u003ewhat happened is being described with an action object\u003c/li\u003e\n\u003cli\u003ethat action object is being dispatched through a central point, the dispatcher\u003c/li\u003e\n\u003cli\u003eon the other side of that dispatcher actions are matched to reducers\u003c/li\u003e\n\u003cli\u003ethe reducers take the information of the actions and return state\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis allows you to manage interactions in your UI in a stateless and synchronous manner.\u003c/p\u003e\n\u003cp\u003eAs a developer, the only thing that really interests you are the actions and the reducers, all the rest is just implementation detail. Actions and reducers shape the app‘s state.\u003c/p\u003e\n\u003cp\u003eIn the following I describe a really simple way how you can implement this type of state management with Custom Events.\u003c/p\u003e\n\u003ch2 id=\"actions\"\u003eActions\u003c/h2\u003e\n\u003cp\u003eFirst let’s define what an action is. An action is a JavaScript object that has one required property with the key  „type“ and two optional ones with the keys „payload“ and „error“. Here an action defined as a TypeScript interface.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\n  type: string;\n  payload?: any;\n  error?: boolean;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eI think we can agree that the JavaScript community mostly agrees on this definition pioneered by Redux, maybe minus the \u003ccode\u003eerror\u003c/code\u003e property. I stole that from \u003ccode\u003eredux-observable\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"dispatcher\"\u003eDispatcher\u003c/h2\u003e\n\u003cp\u003eSo, now that we have actions how do we dispatch them through the dispatcher and what is the dispatcher?\u003c/p\u003e\n\u003cp\u003eWe want to use Custom Events. Those event get dispatched on a DOM element with the \u003ccode\u003edispatchEvent\u003c/code\u003e method. That means our dispatcher is a DOM element. It is really not important which one but let’s just use the \u003ccode\u003ebody\u003c/code\u003e element since that element is present on any web app.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst dispatcher = document.querySelector('body');\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eGreat. Now that we have the dispatcher how do we dispatch an action? That’s where the Custom Events come in. We‘re using Custom Events because they allow us to add Custom event data (which we will, sneakily, call actions).\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edispatcher.dispatchEvent(\n  // The first argument of the Custom Event is \n  // the event name. The event name is the same\n  // as the action type.\n  // The second argument are options.\n  new CustomEvent('SOME_ACTION', {\n    // Here goes our custom data, the action object.\n    detail: { \n      // Action type and event name are the same.\n      type: 'SOME_ACTION', \n      // Here goes the optional data.\n      payload: someData, \n      error: false,\n    },\n  })\n)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSo now that all these actions are being piped through one point in the DOM via Custom Events, we can match them to reducers.\u003c/p\u003e\n\u003cp\u003eIn your component that expects some some state, take an array of action names that the component is interested in and set up event listeners. In the event listeners callback match a reducer with the same name per action to update the component state:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Some example action names.\nconst ACTIONS = [\n  'INCREMENT',\n  'DECREMENT',\n  'ADD_TEN',\n];\n\n...\n\n// As a convention components need a setter and \n// a getter for the state property. \n// That allows you to call a render function or similar\n// whenever state is set to a new value.\nset state(s) {\n  this._state = s;\n  // Use lit-html or some other library that efficiently\n  // can update DOM in the render function. \n  this.render();\n}\n\nget state() {\n  return this._state;\n}\n\n// This is a method on some component.\nsetReducers() {\n  ACTIONS.forEach(ACTION =\u0026gt; {\n    if (reducers[ACTION]) {\n      // Again we are using the reference to the body\n      // element as the dispatcher.\n      dispatcher.addEventListener(ACTION, e =\u0026gt; {\n        // Reducers are kept in an object and matched\n        // via action name.\n        this.state = reducers[ACTION](e.detail, this.state);\n      });\n    } else {\n      throw new Error(\n        `Please add a reducer for the \u0026quot;${ACTION}\u0026quot; action.`\n      );\n    }\n  });\t\n}\n\n...\n\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"the-zerofux-library\"\u003eThe ZeroFux Library\u003c/h2\u003e\n\u003cp\u003eThe code above is a little boilerplate-y so let\u0026rsquo;s make a simple library out of it.\nNo Flux plus no Redux euquals ZeroFux:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eexport class ZeroFux {\n  constructor(element) {\n    if (element) {\n      this.dispatcher = element;\n    } else {\n      this.dispatcher = document.querySelector('body');\n    }\n  }\n\n  // The dipatch method takes an action argument\n  // of the previously defined action type.\n  dispatch(action) {\n    this.dispatcher.dispatchEvent(\n      new CustomEvent(action.type, {\n        detail: action,\n        // In case you set a custom dispatcher element\n        // and want them to bubble.\n        bubbles: true,\n        // In case your custom dispatcher is in the\n        // Shadow DOM and you want them to bubble between\n        // the borders or Shadow DOM and regular DOM.\n        compose: true,\n      })\n    )\n  }\n\n  // This method takes an array of action types\n  // that can influence a component's state,\n  // an object with reducers with the same names\n  // as the action types and a reference\n  // to the component on which we want to set\n  // the state propery.\n  setReducers(actionTypes, reducers, component) {\n    actionTypes.forEach(actionType =\u0026gt; {\n      if (reducers[actionType]) {\n        this.on(actionType, e =\u0026gt; {\n          const action = e.detail;\n          component.state = reducers[actionType](component.state, action);\n        });\n      } else {\n        throw new Error(\n          `Please add a reducer for the \u0026quot;${actionType}\u0026quot; action.`\n        );\n      }\n    });\n  }\n}\n\nexport const zeroFux = new ZeroFux();\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e🎉 tadaa!\u003c/p\u003e\n\u003cp\u003eIt\u0026rsquo;s up on \u003ca href=\"https://github.com/kahlil/zero-fux\"\u003eGithub\u003c/a\u003e and \u003ca href=\"http://npmjs.org/zero-fux\"\u003enpm\u003c/a\u003e right now if you want to try it.\u003c/p\u003e\n\u003cp\u003eYou can see ZeroFux in action in this \u003ca href=\"https://codepen.io/kahlil/pen/bapoPK\"\u003eCodePen\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"side-effects\"\u003eSide Effects\u003c/h2\u003e\n\u003cp\u003e\u0026ldquo;Ah-haaa! How do we manage side effects with ZeroFux?\u0026quot;, you may ask. Well, there is actually a \u003c!-- raw HTML omitted --\u003esimple\u003c!-- raw HTML omitted --\u003e zero-fux way to deal with this.\u003c/p\u003e\n\u003cp\u003eSince these custom events are all streaming through one point in the DOM, the point that we can access via \u003ccode\u003ezeroFux.dispatcher\u003c/code\u003e, we can just listen to these events separately and fire effects on certain actions.\u003c/p\u003e\n\u003cp\u003eThese side effects have to fire an action themselves when they are done with whatever they were doing. That\u0026rsquo;s how we introduce data coming from theses side effects synchronously back into the the data flow.\u003c/p\u003e\n\u003cp\u003eThis is how your SideEffects class could look:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eimport { zeroFux } from 'zero-fux';\n\nexport class SideEffects {\n  run() {\n    const on = zeroFux.dispatcher.addEventListener;\n    on('SOME_ACTION', () =\u0026gt; { \n      someApi.doSomethingAsync()\n        .then(data =\u0026gt; zeroFux.dispatch({\n          type: 'SOME_RESPONSE_ACTION',\n          payload: data,\n        }));\n    });\n    \n    ...\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eSee it in action in the \u003ca href=\"https://codepen.io/kahlil/pen/bapoPK\"\u003eCodePen\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eSo there it is, a bare bones, straight forward unidirectional data flow implementation using custom events.\u003c/p\u003e\n\u003cp\u003eIt uses the same principle I have also used in oddstream, a unidirectional data flow library implemented with RxJS: matching  a \u0026ldquo;stream of actions\u0026rdquo; to reducers. This just has zero dependencies and is practically no code.\u003c/p\u003e\n\u003cp\u003eIn Node this could be implemented using \u003ccode\u003eEventEmitter\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eI think this solution for a unidirectional data flow could be used in apps of any size because ultimately all you have to manage and think about is actions and reducers, same as in any other unidirectional data flow solutions.\u003c/p\u003e\n"
    },
    {
        "title" : "Use Web Components To Build JavaScript Apps",
        "date_published" : "2017-12-14T00:00:00Z",
        "date_modified" : "2017-12-14T00:00:00Z",
        "id" : "https://www.kahlillechelt.com/2017/12/14/use-web-components-to-build-javascript-apps/",
        "url" : "https://www.kahlillechelt.com/2017/12/14/use-web-components-to-build-javascript-apps/",
        "content_html" : "\u003cp\u003eWeb Components are generally described as \u003ca href=\"https://www.webcomponents.org/introduction\"\u003e\u0026ldquo;custom, reusable, encapsulated HTML tags\u0026rdquo;\u003c/a\u003e that encapsulate some DOM, some styling and behavior implemented with JavaScript.\u003c/p\u003e\n\u003cp\u003eI don\u0026rsquo;t understand why this use case is pushed so extensively when Web Components offer a perfectly good component abstraction for building complete JavaScript web apps.\u003c/p\u003e\n\u003cp\u003eI\u0026rsquo;m not so much interested in Web Components for individual new custom tags à la \u003ccode\u003e\u0026lt;google-maps\u0026gt;\u0026lt;/google-maps\u0026gt;\u003c/code\u003e or something. I\u0026rsquo;m interested in using Web Components for building full fledged JavaScript apps with a component-tree architecture, unidirectional data flow and efficient DOM rendering. And I think they are perfect for it!\u003c/p\u003e\n\u003cp\u003eAnd they are perfect for it \u003cem\u003enow\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eWeb Components are typically described as the combination of the following four web standards:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCustom Components\u003c/li\u003e\n\u003cli\u003eShadow DOM\u003c/li\u003e\n\u003cli\u003eHTML Template\u003c/li\u003e\n\u003cli\u003eHTML Imports\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFirst of all let\u0026rsquo;s forget about HTML Imports. Vendors don\u0026rsquo;t agree on them, they block rendering and honestly they feel super clunky to me.\u003c/p\u003e\n\u003cp\u003eWe have ES Modules. Web Components don\u0026rsquo;t work without JavaScript anyway so let\u0026rsquo;s import them via ES Modules or bundle them up and serve them from a server or CDN.\u003c/p\u003e\n\u003cp\u003eMikeal Rogers actually \u003ca href=\"https://medium.com/@mikeal/ive-seen-the-future-it-s-full-of-html-2577246f2210\"\u003ealready built a solution\u003c/a\u003e for himself that allows him to write Web Components in JavaScript, publish them to npm and automatically serve them automatically on a CDN via unpkg.\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s totally the way to go. But he also talks about isolated components as far as I can see.\u003c/p\u003e\n\u003cp\u003eLike I said I think they are the perfect building blocks for building JavaScript web apps how we build them today with React, Vue, Angular and so on.\u003c/p\u003e\n\u003cp\u003eMy opinionated list of things that of what Web Components consist looks like this.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCustom Components (with Shadow DOM and HTML Template behind the scenes)\u003c/li\u003e\n\u003cli\u003eTagged Template Literals\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eCustom Components are the heart. They are the building blocks for web applications. Shadow DOM should always be used for encapsulation and HTML Template should be used to efficiently build the DOM for the component.\u003c/p\u003e\n\u003cp\u003eThe developer should really just interact with a Custom Component class without having to think about Shadow DOM and the HTML Template.\u003c/p\u003e\n\u003cp\u003eWhat Custom Components are missing is an efficient way to automatically update the DOM on component state changes.\u003c/p\u003e\n\u003cp\u003eBasically something like React‘s vDOM.\u003c/p\u003e\n\u003cp\u003eBut adding a vDOM library doesn’t feel right because one of the big wins of Web Components is that you don’t have to manage a separate DOM next to the one in the browser. So what to do?\u003c/p\u003e\n\u003cp\u003eWhile watching the talks of the 2017 Polymer Summit I stumbled on \u003ca href=\"https://www.youtube.com/watch?v=ruql541T7gc\"\u003ethis talk about lit-html\u003c/a\u003e and I was impressed by it right away.\u003c/p\u003e\n\u003cp\u003eIt’s a genius little 2k-sized library that goes with Web Components beautifully. It allows you to build the DOM for your Custom Component with a tagged template literal.\u003c/p\u003e\n\u003cp\u003eTagged Template Literals are a JavaScript standard. They are Template Literals that are marked by a function name. The string contained in the Template Literal is processed by that function before it\u0026rsquo;s returned. In the case of lit-html it looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emarkup\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehtml\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e  \u0026lt;div\u0026gt;\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003estate\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esomeValue\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e  \u0026lt;/div\u0026gt;\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003elit-html comes with the \u003ccode\u003ehtml\u003c/code\u003e-function to use with Template Literals and with a \u003ccode\u003erender\u003c/code\u003e function that efficiently renders updated state to the DOM.\u003c/p\u003e\n\u003cp\u003eUnder the hood lit-html uses HTML Template to efficiently clone the markup. The \u003ccode\u003ehtml\u003c/code\u003e function returns something called a \u003ccode\u003eTemplateResult\u003c/code\u003e which gets passed to the \u003ccode\u003erender\u003c/code\u003e function along with the DOM element to which it should be rendered. lit-html remembers the dynamic parts of the template and makes sure these get updated when needed. The static parts of the template are always just rendered once.\u003c/p\u003e\n\u003cp\u003eAccording to \u003ca href=\"https://youtu.be/Io6JjgckHbg?t=1254\"\u003ethis talk from the Google Web Summit\u003c/a\u003e lit-html fairs pretty well performance-wise.\u003c/p\u003e\n\u003cp\u003eI think it is the perfect library for managing DOM updates of Custom Components because it it just uses Web Standards to do its job and refrains from maintaining a second DOM tree in order to be fast.\u003c/p\u003e\n\u003cp\u003eWith a little luck some sort of efficient DOM updating will also land in the browser as a standard but for now this is great!\u003c/p\u003e\n\u003cp\u003eSo in conclusion: the perfect web app building block for me is just a Custom Component that uses a base class that hides away creating the Shadow DOM and the usage of lit-html.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/kahlil/kaf/blob/master/js/util/lit-element.js\"\u003eI made such a subclass\u003c/a\u003e for \u003ca href=\"https://kaf.kahlillechelt.com\"\u003emy little Café search app\u003c/a\u003e, it\u0026rsquo;s called \u003ccode\u003eLitElement\u003c/code\u003e and it is str8 🔥.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#75715e\"\u003e// A super chill custom element subclass with\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// some nifty default behavior.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eexport\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eLitElement\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eextends\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eHTMLElement\u003c/span\u003e {\n  \u003cspan style=\"color:#a6e22e\"\u003econstructor\u003c/span\u003e() {\n    \u003cspan style=\"color:#66d9ef\"\u003esuper\u003c/span\u003e();\n    \u003cspan style=\"color:#75715e\"\u003e// Initialize the state variable.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003estate\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {};\n    \u003cspan style=\"color:#75715e\"\u003e// Create the Shadow DOM for this element.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eattachShadow\u003c/span\u003e({ \u003cspan style=\"color:#a6e22e\"\u003emode\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;open\u0026#39;\u003c/span\u003e });\n    \u003cspan style=\"color:#75715e\"\u003e// Just a convenient alias for addEventListener\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eon\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eaddEventListener\u003c/span\u003e;\n  }\n  \n  \u003cspan style=\"color:#75715e\"\u003e// The state getter.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estate\u003c/span\u003e() {\n    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003e_state\u003c/span\u003e;\n  }\n  \n  \u003cspan style=\"color:#75715e\"\u003e// The state setter calls the \n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e// invalidate function, which invalidates the\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e// state and calls render.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#a6e22e\"\u003eset\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estate\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e) {\n    \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003e_state\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003es\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003einvalidate\u003c/span\u003e();\n  }\n\n  \u003cspan style=\"color:#75715e\"\u003e// This function makes sure that \n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e// the lit-html render function is called \n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e// when invalidate() is called. \n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e// But it makes sure it is always called \n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e// on next tick so that render calls are \n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#75715e\"\u003e// batched.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#a6e22e\"\u003einvalidate\u003c/span\u003e() {\n    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eneedsRender\u003c/span\u003e) {\n      \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eneedsRender\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e;\n      Promise.\u003cspan style=\"color:#a6e22e\"\u003eresolve\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003ethen\u003c/span\u003e(() =\u0026gt; {\n        \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eneedsRender\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e;\n        \u003cspan style=\"color:#75715e\"\u003e// this.render is the render function of \n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#75715e\"\u003e// the Custom Component that subclasses this\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#75715e\"\u003e// class and it returns a TemplateResult created\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#75715e\"\u003e// with the lit-html html-function and a Tagged \n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#75715e\"\u003e// Template Literal. \n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#75715e\"\u003e// The location to which the DOM is rendered to is\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#75715e\"\u003e// always the shadow root of the component.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#a6e22e\"\u003erender\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003erender\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003estate\u003c/span\u003e), \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eshadowRoot\u003c/span\u003e);\n      });\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e❤️ the platform.\u003c/p\u003e\n"
    },
    {
        "title" : "Web Components And The CMD-R Development Workflow",
        "date_published" : "2017-11-16T00:00:00Z",
        "date_modified" : "2017-11-16T00:00:00Z",
        "id" : "https://www.kahlillechelt.com/2017/11/16/web-components-and-the-cmd-r-development-workflow/",
        "url" : "https://www.kahlillechelt.com/2017/11/16/web-components-and-the-cmd-r-development-workflow/",
        "content_html" : "\u003cp\u003eA couple of months ago I stumbled across Mikeal Rogers\u0026rsquo; article \u003ca href=\"https://medium.com/@mikeal/ive-seen-the-future-it-s-full-of-html-2577246f2210\"\u003eI’ve seen the future, it’s full of HTML.\u003c/a\u003e in which he lays out his reasons why he started to dive into Web Components for the web apps he is working on right now and hinted to the workflow he uses.\u003c/p\u003e\n\u003cp\u003eHis enthusiasm for Web Components is infectious and because I have a lot of respect for Mikeal and his work, his article was a strong signal for me personally that Web Components might be something to take a closer look at.\u003c/p\u003e\n\u003cp\u003eI have ignored them so far because the little I knew about them seemed a little gross to me: HTML imports? HTML, CSS and JavaScript in one file? Ewww. Who wants to write code like that?\u003c/p\u003e\n\u003cp\u003ePolymer didn\u0026rsquo;t help a lot either: all I heard was Polyfills and Bower and WTF is Shady DOM?\u003c/p\u003e\n\u003cp\u003eAnd oh yeah everybody kept screaming \u0026ldquo;OH PRAISETH OUR NEW LORD AND SAVIOR HIS HOLINESS THE REACT\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eSo I kept ignoring it.\u003c/p\u003e\n\u003cp\u003eBut then Mikeal came along and showed how to write Web Components purely with JavaScript. He said the only tooling he uses is a little Browserify in order to package the component so he can distribute it via npm and automatically serve it via a CDN.\u003c/p\u003e\n\u003cp\u003eI was like: \u0026ldquo;No tooling? Hmmm\u0026hellip; that sounds pretty sweet.\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eA few weeks ago I took some time to write a tiny application just with Web Components. I used no tooling, no compilation no polyfills, no nothing. Just Chrome, ES 2015+, ES Modules, \u003ccode\u003e\u0026lt;template\u0026gt;\u003c/code\u003e, Custom Elements and an \u0026ldquo;actions up data down\u0026rdquo; data flow with Custom Events.\u003c/p\u003e\n\u003cp\u003eI used the CMD-R (CTRL-R on Windows) web development workflow as Alex Russel calls it.\u003c/p\u003e\n\u003cp\u003eNow that\u0026rsquo;s a \u003cem\u003edeveloper experience\u003c/em\u003e 😉!\u003c/p\u003e\n\u003cp\u003eIt was surprising to me how freeing it was to be able to use modern syntax, modules and a component architecture in the browser without any tooling. Not to mention the excellent debuggability since you are feeding the browser what you write directly.\u003c/p\u003e\n\u003cp\u003eThe browser has become the only tool and even the only \u0026ldquo;framework\u0026rdquo; we need to write JavaScript apps.\u003c/p\u003e\n\u003cp\u003eJust write your app using Chrome and then make a bundle with dynamically loaded polyfills to make it work everywhere.\u003c/p\u003e\n\u003cp\u003eAs it stands currently that latest versions of Google Chrome, Safari and Opera support these technologies natively, Firefox and Edge are lagging behind but working on it.\u003c/p\u003e\n"
    },
    {
        "title" : "",
        "date_published" : "2017-11-08T00:00:00Z",
        "date_modified" : "2017-11-08T00:00:00Z",
        "id" : "https://www.kahlillechelt.com/2017/11/08/",
        "url" : "https://www.kahlillechelt.com/2017/11/08/",
        "content_html" : "\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://jakearchibald.com/2017/netflix-and-react/\"\u003eNetflix functions without client-side React, and it\u0026rsquo;s a good thing →\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eJake Archibald on Netflix removing React from their landing page:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNetflix has shown you could start with React on the server, then activate the client side parts if you need them, when you need them, and where you need them.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eI hope this starts to become state of the art.\u003c/p\u003e\n"
    },
    {
        "title" : "",
        "date_published" : "2017-10-28T00:00:00Z",
        "date_modified" : "2017-10-28T00:00:00Z",
        "id" : "https://www.kahlillechelt.com/2017/10/28/",
        "url" : "https://www.kahlillechelt.com/2017/10/28/",
        "content_html" : "\u003cp\u003e\u003cstrong\u003e\u003ca href=\"http://workingdraft.de/314/\"\u003eWorking Draft Podcast, Revision 314: DDD, CQRS und WTF →\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIn this episode of the \u003cem\u003eGerman\u003c/em\u003e podcast Working Draft \u003ca href=\"http://twitter.com/goloroden\"\u003eGolo Roden\u003c/a\u003e\ndoes a great job explaining what DDD (Domain-Driven Design), CQRS (Command Query Responsibility Segregation) and Event Sourcing is and how his new project \u003ca href=\"http://wolkenkit.io\"\u003ewolkenkit\u003c/a\u003e can help developers applying those principles and patterns.\u003c/p\u003e\n"
    },
    {
        "title" : "",
        "date_published" : "2017-10-26T00:00:00Z",
        "date_modified" : "2017-10-26T00:00:00Z",
        "id" : "https://www.kahlillechelt.com/2017/10/26/",
        "url" : "https://www.kahlillechelt.com/2017/10/26/",
        "content_html" : "\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://medium.com/@angustweets/just-a12d54221f65\"\u003eWhy I wrote Just. by Angus Croll →\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/angus-c/just\"\u003eJust\u003c/a\u003e is a collection of dependency-free modules for common operations\non Arrays, Collections, Strings, Objects and Functions started by \u003ca href=\"http://twitter.com/angustweets\"\u003e@angustweets\u003c/a\u003e.\n\u0026ldquo;Do we really need something like that when we have Lodash?\u0026rdquo; you might ask.\u003c/p\u003e\n\u003cp\u003eAngus does a great job explaining why he started Just:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eJust is designed for those who value easy to follow, debuggable utilities over version lotto and yak-shaving down the module tree. There’s nothing fancy or particularly clever here. You won’t find elaborate routines that optimize for trillion element arrays; just short, cohesive, readable code––the sort of helper functions we all inline in our projects every day because edge case optimizations that we’ll never need aren’t worth the overhead and the uncertainty of a sprawling dependency chain.\u003c/p\u003e\n\u003c/blockquote\u003e\n"
    },
    {
        "title" : "I Finally Understood Functions As A Service",
        "date_published" : "2017-10-24T00:00:00Z",
        "date_modified" : "2017-10-24T00:00:00Z",
        "id" : "https://www.kahlillechelt.com/2017/10/24/i-finally-understood-functions-as-a-service/",
        "url" : "https://www.kahlillechelt.com/2017/10/24/i-finally-understood-functions-as-a-service/",
        "content_html" : "\u003cp\u003eSince I heard it for the first time, I was struggling to understand what \u0026ldquo;Functions As A Service\u0026rdquo; like AWS Lambda really is. I heard people explaining it on podcasts and read what it said on the AWS Lambda landing page but it just didn\u0026rsquo;t click.\u003c/p\u003e\n\u003cp\u003eLast week me and \u003ca href=\"http://twitter.com/hglattergotz\"\u003eHenning\u003c/a\u003e recorded \u003ca href=\"http://reactive.audio/87\"\u003ethe lastest episode of our podcast REACTIVE\u003c/a\u003e. On that episode Henning talks about how he uses AWS Lambda and an AWS database to build an API for their app at work. This made me finally understand what this is all about.\u003c/p\u003e\n\u003cp\u003eThey built the API by writing some code that parses request parameters, retrieves some data from the database and then sends that data back as JSON in the JSON API format. That code is the function that is being provided \u0026ldquo;as a service\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eThat is it.\u003c/p\u003e\n\u003cp\u003eThe HTTP layer, security and scalability is all provided by AWS services. \u003cem\u003eFunctions As A Service\u003c/em\u003e also means that you only pay for computing time when the function is used. When there is no requests to the API then you don\u0026rsquo;t pay.\u003c/p\u003e\n\u003cp\u003eThis is an incredibly fast and efficient way to build an API that is production ready in no time.\u003c/p\u003e\n\u003cp\u003eOn the podcast we also talked about how more and more of these \u0026ldquo;solved problems\u0026rdquo; like security and scalability will be packed up into some service and how the usage of them will certainly be very widespread in the not so distant future.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://twitter.com/codepo8\"\u003e@codepo8\u003c/a\u003e said it best on Twitter yesterday:\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n"
    },
    {
        "title" : "How Matt Mullenweg Single-Handedly Made Facebook Relicense React to MIT",
        "date_published" : "2017-09-26T00:00:00Z",
        "date_modified" : "2017-09-26T00:00:00Z",
        "id" : "https://www.kahlillechelt.com/2017/09/26/how-matt-mullenweg-single-handedly-made-facebook-relicense-react-to-mit/",
        "url" : "https://www.kahlillechelt.com/2017/09/26/how-matt-mullenweg-single-handedly-made-facebook-relicense-react-to-mit/",
        "content_html" : "\u003cp\u003eOK, I have no proof that this is actually true, but it is a fun thought experiment / conspiracy theory. Here me out.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://code.facebook.com/posts/300798627056246/relicensing-react-jest-flow-and-immutable-js/\"\u003eFacebook just announced that they are relicensing a few of their open source projects to the MIT license\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI am pretty sure this change will be extremely well received by everybody using React.\u003c/p\u003e\n\u003cp\u003eIt will also ensure that the majority of React users will switch to React 16 (the first version under the MIT license) because their BSD + patents license is widely mistrusted and / or disliked.\u003c/p\u003e\n\u003cp\u003eI for one like to think that this change was triggered by the shots that Matt Mullenweg fired in \u003ca href=\"https://ma.tt/2017/09/on-react-and-wordpress/\"\u003ehis post \u0026ldquo;On WordPress and React\u0026rdquo;\u003c/a\u003e a few days ago. I re-read his post a couple of times because I found some of the statements he made very interesting. At first glance the post reads like \u0026ldquo;OK WordPress just ditched React no big dizzle\u0026rdquo; but after re-reading it I realized that Matt just deprived React of a quantum leap in growth. Wow. Let\u0026rsquo;s go through the interesting points:\u003c/p\u003e\n\u003cp\u003eFirst 💥:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eBig companies like to bury unpleasant news on Fridays\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThis statement is in context of Facebook\u0026rsquo;s post about sticking with the BSD + patents license after the Apache Foundation put their license on the black list.\u003c/p\u003e\n\u003cp\u003eRight in the beginning of his article he accuses Facebook of shady behavior.\u003c/p\u003e\n\u003cp\u003eSecond 💥:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI\u0026rsquo;m not judging Facebook or saying they\u0026rsquo;re wrong, it\u0026rsquo;s not my place.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThis is hilarious. Translation: \u0026ldquo;I am judging Facebook and I am saying they are wrong.\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eThird 💥:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWe had a many-thousand word announcement talking about how great React is and how we\u0026rsquo;re officially adopting it for WordPress, and encouraging plugins to do the same. I’ve been sitting on that post, hoping that the patent issue would be resolved in a way we were comfortable passing down to our users.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eNow for the squeeze.\u003c/p\u003e\n\u003cp\u003eTranslation: \u0026ldquo;We were going to officially adopt React as the WordPress JavaScript thing and make a big fuss about it which would have been massive promo for you for free and would most likely have pushed React adoption into jQuery-like spheres. But now we\u0026rsquo;re not doing that, lol.\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eFourth 💥:\u003c/p\u003e\n\u003cp\u003eSqueeze even harder:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eCore WordPress updates go out to over a quarter of all websites, having them all inherit the patents clause isn’t something I’m comfortable with.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eTranslation: \u0026ldquo;For realz Facebook?!?!? You don\u0026rsquo;t want your Framework to be used by over 25% of \u003cem\u003eall websites on the internet\u003c/em\u003e with a snap of a finger!?!? Maybe y\u0026rsquo;allz want to think about that a little bit?\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eFifth 💥:\u003c/p\u003e\n\u003cp\u003eNow for the kill:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eBut we have a lot of problems to tackle, and convincing the world that Facebook’s patent clause is fine isn’t ours to take on. It’s their fight.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eTranslation: \u0026ldquo;We don\u0026rsquo;t need all your drama. You\u0026rsquo;re on your own.\u0026rdquo;\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWe’ll look for something with most of the benefits of React, but without the baggage of a patents clause that’s confusing and threatening to many people.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eTranslation: \u0026ldquo;React is not indispensable and can easily be switched out with something similar, thank you.\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eSo good. He whacked them over the head in the nicest way possible.\u003c/p\u003e\n\u003cp\u003eIt makes total sense to me that Matt\u0026rsquo;s post would make them rethink their licensing strategy. The Apache Foundation reject did not really mean a big impediment to their growth but loosing WordPress would deprive them of more massive adoption and may even mean a decline in React adoption going forward because Matt and WordPress as a project are just incredibly influential in the web development community.\u003c/p\u003e\n\u003cp\u003ePotentially being the JavaScript thing for WordPress and WordPress plugins and the growth React would gain by that must outweigh the litigation costs they would save by sticking with BSD + patents.\u003c/p\u003e\n\u003cp\u003eMatt has already reacted to Facebook\u0026rsquo;s anouncement:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI am surprised and excited to see the news that Facebook is going to drop the patent clause that I wrote about last week. They’ve announced that with React 16 the license will just be regular MIT with no patent addition. I applaud Facebook for making this move, and I hope that patent clause use is re-examined across all their open source projects.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eMatt is pleased about the change.\u003c/p\u003e\n\u003cp\u003eBut Facebook has lost the chance to be the designated WordPress JavaScript framework:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eParticularly with Gutenberg there may be an approach that allows developers to write Gutenberg blocks (Gutenblocks) in the library of their choice including Preact, Polymer, or Vue, and now React could be an officially-supported option as well.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eLooks like the WordPress team found out about \u003ca href=\"https://twitter.com/_developit/status/898952382960119808/photo/1\"\u003ethis new-fangled compiler\u003c/a\u003e that Jason Miller of Preact-fame is working on which compiles, Web Components, VueJS components and Preact components into highly optimized Preact components. That\u0026rsquo;s awesome.\u003c/p\u003e\n\u003cp\u003eInterestingly Matt is not mentioning if they will still switch away from React for \u003ca href=\"https://developer.wordpress.com/calypso/\"\u003eCalypso\u003c/a\u003e. Somebody opened \u003ca href=\"https://github.com/Automattic/wp-calypso/issues/18198\"\u003ean issue asking about\u003c/a\u003e it but nobody has responded yet.\u003c/p\u003e\n\u003cp\u003eMeanwhile React 16 has been released and \u003ca href=\"https://github.com/facebook/react/blob/master/LICENSE\"\u003ethe license is indeed MIT\u003c/a\u003e.\u003c/p\u003e\n"
    },
    {
        "title" : "All New",
        "date_published" : "2017-09-15T00:00:00Z",
        "date_modified" : "2017-09-15T00:00:00Z",
        "id" : "https://www.kahlillechelt.com/2017/09/15/all-new/",
        "url" : "https://www.kahlillechelt.com/2017/09/15/all-new/",
        "content_html" : "\u003cp\u003eMy blog used to be a Medium publication with a linked domain but I ditched Medium. I was disappointed with the design directions they are taking.\nI was a big fan of Medium\u0026rsquo;s design before the recent change to the new serif wordmark. It feels disjointed to me now and it is apparent that they are pushing their paid services and are working hard to make an \u003cem\u003eactual\u003c/em\u003e business out of Medium. That\u0026rsquo;s all good and fine but I don\u0026rsquo;t like the changes and that made me realize I need to have more control over my blog again.\u003c/p\u003e\n\u003cp\u003eAlso I wanted to consolidate kahlil.info and kahlillechelt.com. So here we are. New blog same old me.\u003c/p\u003e\n\u003cp\u003eFor now I am leaving my old blog posts \u003ca href=\"https://medium.com/@kahlil\"\u003eover there on Medium\u003c/a\u003e. I will port them over eventually. Maybe. I will be cross posting my blog posts from here over at Medium as well. The readership you get over there via their network is really nice.\u003c/p\u003e\n\u003ch2 id=\"design\"\u003eDesign\u003c/h2\u003e\n\u003cp\u003eThe initial inspiration for the design was a quick study that \u003ca href=\"https://twitter.com/magalhini\"\u003e@magalhini\u003c/a\u003e posted to Twitter a while ago. I played around with it but wanted a different font pairing. After some googling I found \u003ca href=\"https://www.typewolf.com/google-fonts\"\u003eTypewolf Google Fonts\u003c/a\u003e and \u003ca href=\"http://fonts.greatsimple.io/rubik-roboto/\"\u003eGreat Simple\u003c/a\u003e, two websites that suggest Google font pairings. I ended up choosing \u003ca href=\"https://fonts.google.com/specimen/Roboto+Mono\"\u003eRoboto Mono\u003c/a\u003e as a main font and \u003ca href=\"https://fonts.google.com/specimen/Rubik\"\u003eRubik\u003c/a\u003e for my wordmark.\u003c/p\u003e\n\u003cp\u003eI found the pairing \u003ca href=\"http://fonts.greatsimple.io/rubik-roboto/\"\u003ehere\u003c/a\u003e and after I saw it I kept coming back to it. So I went with it. I really like using a monospace font for the body text.\u003c/p\u003e\n\u003cp\u003eI am happy with it. Keeping it simple.\u003c/p\u003e\n\u003ch2 id=\"its-a-static-site\"\u003eIt\u0026rsquo;s A Static Site\u003c/h2\u003e\n\u003cp\u003eAs a web developer I \u003cem\u003ehave\u003c/em\u003e to use a static site generator of course. Which one you ask?\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://gohugo.io\"\u003eHugo\u003c/a\u003e!\u003c/p\u003e\n\u003cp\u003eHugo is written in Go and comes as a binary. It\u0026rsquo;s wicked fast and can easily deal with huge amounts of posts.\u003c/p\u003e\n\u003cp\u003eIt has been around for a while now and is really flexible. It works very similarly to other static site generators like Jekyll or Metalsmith.\u003c/p\u003e\n\u003ch2 id=\"hosting\"\u003eHosting\u003c/h2\u003e\n\u003cp\u003eFor hosting I went with \u003ca href=\"http://netlify.com\"\u003eNetlify\u003c/a\u003e, I\u0026rsquo;ve been really impressed with their user experience for hosting static pages. If your site is on Github it is incredibly easy to  deploy it to Netlify:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003elink your Github respository\u003c/li\u003e\n\u003cli\u003etell them the command that builds your site\u003c/li\u003e\n\u003cli\u003etell them the name of the folder that the built site end up in\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eDone!\u003c/p\u003e\n\u003cp\u003eThe site gets redeployed every time you push to master (this feature can be turned off) and if I push a branch to the site\u0026rsquo;s Github repo Netlify will attempt to deploy a preview automatically. It\u0026rsquo;s truly a joy to use.\u003c/p\u003e\n\u003cp\u003eIf you are interested in the code for this site you can find it \u003ca href=\"https://github.com/kahlil/kahlillechelt.com\"\u003eon Github\u003c/a\u003e.\u003c/p\u003e\n"
    }
    ]
}